<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring+Struts2+Hibernate后台管理系统</title>
    <url>/archives/13.html</url>
    <content><![CDATA[<p><img src="https://image.charones.com/usr/uploads/2019/07/3323727449.png"></p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>只学不练假把式，人都是有遗忘性的，这个项目是学习了Spring+Hibernate+Struts2框架后的一个产物，同时也记录了我学习的过程与收获。</p>
<hr>
<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>项目属于一个后台管理系统，进行CRUD操作，具体简介如下：</p>
<p><strong>项目模块</strong></p>
<ul>
<li>普通人员管理</li>
<li>后台人员管理</li>
<li>新闻管理</li>
<li>资源上传下载</li>
<li>类别管理</li>
<li>部门管理</li>
</ul>
<p><strong>架构方式</strong><br>面向接口开发，三层架构，基于注解方式开发</p>
<p><strong>请求方式</strong><br>Ajax异步向后台发送请求</p>
<p><strong>数据库</strong><br>mysql关系型数据库</p>
<p><strong>开发周期</strong><br>利用空闲时间，独立开发，用时17天</p>
<p><strong>项目截图</strong><br><img src="https://image.charones.com/usr/uploads/2019/09/1993705987.png"></p>
<p><em>更多截图请点击获取项目</em></p>
<hr>
<h2 id="项目获取"><a href="#项目获取" class="headerlink" title="项目获取"></a>项目获取</h2><p><em>更多详情请获取项目</em></p>
<p>项目获取地址：<a href="https://github.com/Snykta/admin_ssh">https://github.com/Snykta/admin_ssh</a></p>
<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>再附上一个曾经写的一个原生的JavaWeb项目(没用任何框架)</p>
<p>项目地址：<a href="https://github.com/Snykta/GalaCMS">https://github.com/Snykta/GalaCMS</a></p>
<hr>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>分享是快乐的，分享是互相进步的，如果项目存在不足缺点，还劳烦请指点迷津，如果是对你的学习路途有了些许帮助，哈哈，那就还请动动小手点个Star。</p>
]]></content>
      <categories>
        <category>JavaWeb项目</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次Hibernate一对多插入问题</title>
    <url>/archives/start.html</url>
    <content><![CDATA[<p><img src="https://image.charones.com/usr/uploads/2019/07/1609932867.png"></p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   在一次web项目中，其场景为员工与部门的关联关系，在员工表生成一个外键对应其部门表的主键，配置的为一对多关联关系，当插入数据时却出现了员工表外键为null的情况。</p>
<hr>
<h2 id="员工类"><a href="#员工类" class="headerlink" title="员工类"></a>员工类</h2><p>基于hibernate注解配置，getter与setter方法不再列出，只列出了其对应字段。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name=&quot;p_users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P_user</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue(generator=&quot;mygener&quot;)</span></span><br><span class="line"><span class="comment">//整长策略</span></span><br><span class="line"><span class="meta">@GenericGenerator(name=&quot;mygener&quot;,strategy=&quot;native&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="meta">@Column(name=&quot;names&quot;,length=20,nullable=true,unique=false)</span></span><br><span class="line"><span class="keyword">private</span> String names;</span><br><span class="line"><span class="meta">@Column(name=&quot;sex&quot;,length=10,nullable=true,unique=false)</span></span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="meta">@Column(name=&quot;iphone&quot;,length=40,nullable=true,unique=false)</span></span><br><span class="line"><span class="keyword">private</span> String iphone;</span><br><span class="line"><span class="meta">@Column(name=&quot;email&quot;,length=45,nullable=true,unique=false)</span></span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="meta">@Column(name=&quot;states&quot;,length=10,nullable=true,unique=false)</span></span><br><span class="line"><span class="keyword">private</span> String states;</span><br></pre></td></tr></table></figure>
<h2 id="部门类"><a href="#部门类" class="headerlink" title="部门类"></a>部门类</h2><p>基于hibernate注解配置，getter与setter方法不再列出，只列出了其对应字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name=&quot;dept&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue(generator=&quot;mygener&quot;)</span></span><br><span class="line"><span class="meta">@GenericGenerator(name=&quot;mygener&quot;,strategy=&quot;native&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="meta">@Column(name=&quot;ename&quot;,length=30,nullable=true,unique=false)</span></span><br><span class="line"><span class="keyword">private</span> String ename;</span><br><span class="line"><span class="meta">@Column(name=&quot;datas&quot;,length=40,nullable=true,unique=false)</span></span><br><span class="line"><span class="keyword">private</span> String datas;</span><br><span class="line"><span class="comment">//注解配置一对多关联关系</span></span><br><span class="line"><span class="meta">@OneToMany(targetEntity=P_user.class,cascade=CascadeType.ALL)</span></span><br><span class="line"><span class="comment">//外键名称</span></span><br><span class="line"><span class="meta">@JoinColumn(name=&quot;dept_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;P_user&gt; puser = <span class="keyword">new</span> HashSet&lt;P_user&gt;();</span><br></pre></td></tr></table></figure>
<h2 id="原Test测试类"><a href="#原Test测试类" class="headerlink" title="原Test测试类"></a>原Test测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SessionFactory sessionFactory = SessionFacUtil.getsessionFactory();<span class="comment">//加载配置</span></span><br><span class="line">Session session = sessionFactory.openSession();<span class="comment">//创建session	</span></span><br><span class="line">Transaction tx =  session.beginTransaction();<span class="comment">//开启事务</span></span><br><span class="line">P_user user = <span class="keyword">new</span> P_user ();</span><br><span class="line">user.setNames(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">Set&lt;P_user&gt; sets = <span class="keyword">new</span> HashSet&lt;P_user&gt;();</span><br><span class="line">sets.add(user);</span><br><span class="line"><span class="comment">//查询已有的部门</span></span><br><span class="line">Dept dept = session.get(Dept.class, <span class="number">12</span>);</span><br><span class="line"><span class="comment">//将该人员类加入到部门的set集合中，并产生外键联系</span></span><br><span class="line">dept.setUsers(sets);</span><br><span class="line">session.save(dept);</span><br><span class="line">tx.commit();</span><br><span class="line">session.close();</span><br><span class="line">sessionFactory.close();</span><br></pre></td></tr></table></figure>
<p>运行测试无异常，查看数据库也正常插入了数据<br>数据库显示为：<br><img src="https://image.charones.com/usr/uploads/2019/07/3283312814.png"></p>
<p>可见以正常插入，并与产生了外键，可当再次运行测试类，再次插入时出现了问题，新运行的插入的插入成功了，可第一次插入的数据外键却变成了null，也就是说，只能存在这一个外键，不能有两个。<br>如图：<br><img src="https://image.charones.com/usr/uploads/2019/07/3252239438.png"></p>
<p>这就让我感到很是疑惑，一对多，由表可知，一个部门下可以有多个部门的，不应该会出现这种null的情况的，一开始以为配置的问题，检查了好多配置地方，也在网上搜寻了一大圈，最后还是无果。</p>
<p>正当我一筹莫展的时候，突然发现了一句关键的话</p>
<pre><code>Set&lt;P_user&gt; sets = new HashSet&lt;P_user&gt;();
</code></pre>
<p>没错，就是它，我怀疑是不是这个set集合的问题，每次运行new后都产生新的集合，然后再把集合加入dept中，再执行数据插入，会不会是这个的影响，于是改造了以下新的测试类</p>
<h2 id="新Test测试类"><a href="#新Test测试类" class="headerlink" title="新Test测试类"></a>新Test测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SessionFactory sessionFactory = SessionFacUtil.getsessionFactory();<span class="comment">//加载配置</span></span><br><span class="line">Session session = sessionFactory.openSession();<span class="comment">//创建session	</span></span><br><span class="line">Transaction tx =  session.beginTransaction();<span class="comment">//开启事务</span></span><br><span class="line">P_user user = <span class="keyword">new</span> P_user ();</span><br><span class="line">user.setNames(<span class="string">&quot;张三3&quot;</span>);</span><br><span class="line"><span class="comment">//查询已有的部门</span></span><br><span class="line">Dept dept = session.get(Dept.class, <span class="number">12</span>);</span><br><span class="line"><span class="comment">//将该人员类加入到该查询出来的dept的set集合中</span></span><br><span class="line">dept.getUsers().add(user);</span><br><span class="line">session.save(dept);</span><br><span class="line">tx.commit();</span><br><span class="line">session.close();</span><br><span class="line">sessionFactory.close();</span><br></pre></td></tr></table></figure>
<p>测试结果完美通过<br>数据库截图：<br><img src="https://image.charones.com/usr/uploads/2019/07/348904703.png"></p>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>就是这个每次new的set集合问题，结果执行时有让数据库update的了以下，把第一次插入的数据变为了null。</p>
<p>一次小小的细节问题，也体现出看来我对hibernate了解学习的还不够透彻，还需努力专研。</p>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC在非Contoller层获取request和response对象</title>
    <url>/archives/36.html</url>
    <content><![CDATA[<p><img src="https://image.charones.com/usr/uploads/2019/07/1458723386.jpg"></p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在SpringMVC中，如果在contoller层获取request和response对象是很好获取的，直接在handler方法参数中可以直接拿到request和response对象，而在非contoller层该如何获取呢？</p>
<p>答：通过springMVC提供的RequestContextHolder来获取</p>
<hr>
<h2 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpServletResponse response =((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getResponse();</span><br><span class="line"></span><br><span class="line">HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br></pre></td></tr></table></figure>



<p><strong>需要导入的包</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>以上就是在非contoller层获取request和response对象的方法，也算是做一个笔记，防止日后有遗忘。</p>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring+SpringMVC+Mybatis后台管理系统</title>
    <url>/archives/44.html</url>
    <content><![CDATA[<p><img src="https://image.charones.com/usr/uploads/2019/08/1239678965.jpg"></p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>距离上一个发布的SSH项目已经有一段时间了，在完成了上一个SSH项目后，于是乎又开始SSM框架的学习，到今为止SSM框架已基本完成，同时做了一个SSM的后台管理系统，以便巩固更多知识点。</p>
<hr>
<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>项目属于后台管理系统，前端样式风格还是沿用了SSH项目的前端样式（其实是不想再调试前端了，把时间放在了后端），后端使用SSM框架，前后端分离，进行CRUD操作。</p>
<p><strong>项目模块</strong></p>
<ul>
<li>普通人员管理</li>
<li>后台人员管理</li>
<li>新闻管理</li>
<li>资源上传</li>
<li>资源下载</li>
<li>类别管理</li>
<li>部门管理</li>
</ul>
<p><strong>架构方式</strong><br>前后端分离，面向接口开发，三层架构，部分链接采用了RESTful风格。</p>
<p><strong>请求方式</strong><br>Ajax异步向后台发送请求</p>
<p><strong>数据库</strong><br>mysql关系型数据库</p>
<p><strong>运行环境</strong><br>tomcat9.x</p>
<p><strong>开发周期</strong><br>自学 + 做项目= 45天</p>
<p><strong>项目结构图</strong><br><img src="https://image.charones.com/usr/uploads/2019/09/2737441036.png"></p>
<p><strong>项目截图</strong></p>
<p><img src="https://image.charones.com/usr/uploads/2019/09/4235734422.png"></p>
<p><img src="https://image.charones.com/usr/uploads/2019/09/2378386128.png"></p>
<p><em>更多截图请点击获取项目</em></p>
<hr>
<h2 id="获取项目"><a href="#获取项目" class="headerlink" title="获取项目"></a>获取项目</h2><p><em>更多详情请点击获取项目</em></p>
<p>项目获取地址：<a href="https://github.com/Snykta/admin_ssm">点击直达</a></p>
<hr>
<h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><p>SSH项目：<a href="https://www.charones.com/archives/13.html">SSH后台管理系统</a></p>
<hr>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>分享是快乐的，分享是互相进步的，如果项目存在不足缺点，还劳烦请指点迷津，学习我一直在路上，如果是对你的学习路途有了些许帮助，那就还劳烦请动动小手点个Star。</p>
]]></content>
      <categories>
        <category>JavaWeb项目</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis中Mapper传入复杂性参数</title>
    <url>/archives/39.html</url>
    <content><![CDATA[<p><img src="https://image.charones.com/usr/uploads/2019/08/3537748652.jpg"></p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期自学了Mybatis框架，学完之后也正在着手写了一个SSM项目，在项目中使用Mybatis持久层框架时，对Mapper.XML传参数时遇到了一些小小的问题，于是在此做个笔记，加深印象。</p>
<h2 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h2><p>持久层框架，是apache下的一个开源项目，使用映射方式，半自动化（需要程序员自己编写Sql语句），相比Hibernate而言学习难度小，上手快。</p>
<h2 id="Mybatis传参类型"><a href="#Mybatis传参类型" class="headerlink" title="Mybatis传参类型"></a>Mybatis传参类型</h2><ul>
<li>基本数据类型：int，String，Dete等</li>
<li>复杂数据类型：Bean实体类，map</li>
</ul>
<h2 id="传参属性"><a href="#传参属性" class="headerlink" title="传参属性"></a>传参属性</h2><p>Mybatis中的<strong>parameterType</strong>属性</p>
<p><em>本文主要记录传入复杂型参数中的Map</em></p>
<h2 id="传入Map-一"><a href="#传入Map-一" class="headerlink" title="传入Map(一)"></a>传入Map(一)</h2><p><strong>Mapper.XML配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--parameterType传入的类型为Map，resultType返回为一个实体类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.Map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;AdminUser&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--#&#123;name&#125;花括号中的值为Map集合中的Key--&gt;</span></span><br><span class="line">SELECT  * FROM USER WHERE username = #&#123;name&#125; AND sex =#&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>Mapper接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数类型为Map，与Mapper.xml中的parameterType参数类型一致</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AdminUser <span class="title">selectUser</span><span class="params">(Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>
<p><strong>测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义Map集合</span></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张小明&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">//调用dao接口，并传入Map集合</span></span><br><span class="line">对象.selectUser(map);</span><br></pre></td></tr></table></figure>
<p><strong>测试结果截图</strong><br><img src="https://image.charones.com/usr/uploads/2019/08/2856416609.png"><br>可见已经查询出了该条数据</p>
<h2 id="传入Map-二"><a href="#传入Map-二" class="headerlink" title="传入Map(二)"></a>传入Map(二)</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--parameterType传入的类型为Map，resultType返回为一个实体类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.Map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;AdminUser&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--#&#123;user.username&#125;花括号中的值为User实体类中属性--&gt;</span></span><br><span class="line">SELECT  * FROM USER WHERE username = #&#123;user.username&#125; AND sex =#&#123;user.sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>Mapper接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数类型为User实体类，使用@Param注解的作用是给参数命名</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AdminUser <span class="title">selectUser</span><span class="params">((<span class="meta">@Param(&quot;user&quot;)</span>AdminUser adminUser)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>
<p><strong>测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义实体类对象</span></span><br><span class="line">AdminUser u = <span class="keyword">new</span> AdminUser();</span><br><span class="line">u.setSex(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">u.setUname(<span class="string">&quot;张小明&quot;</span>);</span><br><span class="line"><span class="comment">//调用接口，传入实体类对象</span></span><br><span class="line">对象.selectUser(u);</span><br></pre></td></tr></table></figure>
<p><strong>测试结果截图</strong><br><img src="https://image.charones.com/usr/uploads/2019/08/2856416609.png"><br>可见已经查询出了该条数据</p>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>总体来说Mybatis的使用还是比较方便的，但需要对Sql语句有一定的掌握，当然也可以使用generator逆向工程生成Mapper，不过生成的代码也需要自己能够理解能够看懂，但在看懂的前提下，还是需要懂得sql语句，万变不离其宗。</p>
]]></content>
      <categories>
        <category>持久层框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA中maven构建的SSM项目mapper绑定失败</title>
    <url>/archives/60.html</url>
    <content><![CDATA[<p><img src="https://image.charones.com/usr/uploads/2019/09/2483435586.jpg"></p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前开发Web项目一直是用eclipse来开发，IDEA也用过，但一直用它来写一些小项目(非web项目)，今天突然想用IDEA来开发web项目，于是说干就干，场景：利用maven构建一个SSM项目。一顿配置操作后把项目构建成了，可当测试时却出现了问题，Mybatis的Mapper一直绑定不上，一直报错。</p>
<hr>
<h2 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h2><p>如图所示：<br><img src="https://image.charones.com/usr/uploads/2019/09/2979408028.png"></p>
<p>一直提示提示：Invalid bound statement (not found)，意思为绑定语句错误，找不到该方法。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>因为之前一直用eclipse来开发，这个问题还是第一次遇到，首先我先想到是不是配置文件错误，于是把配置文件逐个排查，经过一系列测试排查，发现配置文件并没有错误。没问题后又对代码经过一系列的检查，可也还是没有发现问题。<br><strong>猜想</strong><br>正当我一筹莫展时，突然想到是不是IDEA把项目编译后那些xml配置文件存放的路径的问题，因为IDEA明确了源码和资源文件的放置位置（maven项目），也就是说源码就要会被编译，但当我把xml文件放在java目录下的mian目录中我猜想是不是没被编译到classes中，才导致找不到方法。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在pom.xml的<build>标签下中加入如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--编译resources下的配置，例如Spring的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--编译java下的配置，例如Mybatis的Mapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
<p>意思为：xml配置文件随同java编译后的class文件一同copy到相应的class目录</p>
<p><strong>结果</strong><br>经过测试果然和我猜想的一样，最后运行成功，方法成功被调用。</p>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>eclipse编译项目会自动将xml配置文件编译进classes,IDEA却不行，看来还是对IDEA的使用不熟练，之前一直用eclipse开发，不经常用IDEA，突然换个开发工具出现了太多问题，还是不够熟练，革命还未胜利，同志还须再努力。</p>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM购物商城项目+后台管理</title>
    <url>/archives/66.html</url>
    <content><![CDATA[<p><img src="https://image.charones.com/usr/uploads/2019/11/710888379.jpg"></p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以往都是使用的eclipse工具来开发项目，虽然IDEA也在使用，但使用它来开发的项目较少，前几天eclipse突然抽风了，导致项目无法进行下去，于是就打算转战IDEA，而后就有了以下这篇文章，记录IDEA下搭建Maven聚合工程。</p>
<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>本项目是一个分布式商城项目，用到的技术栈有：Spring，SpringMVC，Mybatis，Dubbo，Redis，FastDFS，Zookeeper，Nginx等框架，本篇文章不重点介绍此项目，<strong>主要记录IDEA下创建maven聚合项目的过程</strong>。</p>
<h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><p>parent为工程的父工程，用来管理jar包的版本号，项目中所有工程都继承该父工程。</p>
<p><img src="https://image.charones.com/usr/uploads/2019/11/1909012967.png"></p>
<hr>
<p><strong>开始之前先创建一个空的工程，作为整个项目的工作空间，存储项目。</strong></p>
<p><img src="https://image.charones.com/usr/uploads/2019/11/3179563415.png"><br><strong>点击next后会让输入项目名称，输完项目名称后，点击Finish后就创建完成了</strong>。</p>
<hr>
<h2 id="创建parent工程"><a href="#创建parent工程" class="headerlink" title="创建parent工程"></a>创建parent工程</h2><p>1、依次点击File ——&gt; New ——&gt; Module..<br><strong>如图所示：</strong><br><img src="https://image.charones.com/usr/uploads/2019/11/3229652861.png"><br>2、点击后会弹出创建工程的窗口，然后依此如图点击。</p>
<p><img src="https://image.charones.com/usr/uploads/2019/11/2154353145.png"></p>
<p>3、在此页面填写maven工程信息后，一直点击next直至finish。<br><strong>如图所示：</strong><br><img src="https://image.charones.com/usr/uploads/2019/11/3885920751.png"></p>
<p>4、此时parent工程创建完毕，打开parent工程的pom.xml文件进行配置信息的修改，当然也可以删除src下的文件，因为在此就只是一个版本控制的pom工程，因此也可以删除src下的文件。<br>如图所示：<br><img src="https://image.charones.com/usr/uploads/2019/11/1532921932.png"><br>在此只用了一个fastjson依赖作为了演示。<br><strong>注意：一定要修改parent工程的打包方式，在此为父工程，并作为版本依赖的控制，所以修改为pom方式。</strong></p>
<h2 id="创建common工程"><a href="#创建common工程" class="headerlink" title="创建common工程"></a>创建common工程</h2><p>1、和创建parent工程步骤一致，一直到填写maven工程信息才有所不同，在此就不再记录了，直接记录不同之处。<br>2、填写maven信息，如图所示：<br><img src="https://image.charones.com/usr/uploads/2019/11/1564926419.png"><br><strong>注意：最上面有两个选项卡，第一个选择为none，意思为不将此过程加入到parent中（因为只需要单纯的继承，所以不需要添加，聚合工程时才需要），第二个选项卡选择刚创建的parent，意思为此工程将继承parent工程。</strong><br>3、修改完毕后，点击next直至finish。<br>4、common工程创建完毕，修改pom.xml配置信息，如图所示：<br><img src="https://image.charones.com/usr/uploads/2019/11/3826692154.png"><br>common工程创建完毕。</p>
<h2 id="创建manger聚合工程"><a href="#创建manger聚合工程" class="headerlink" title="创建manger聚合工程"></a>创建manger聚合工程</h2><p>1、和创建common工程步骤一致，都要继承parent工程，最后创建完毕后，把pom.xml文件的打包方式修改为pom。<br>pom文件如图所示：<br><img src="https://image.charones.com/usr/uploads/2019/11/2948097408.png"><br>manger工程创建完毕</p>
<h2 id="创建pojo子工程"><a href="#创建pojo子工程" class="headerlink" title="创建pojo子工程"></a>创建pojo子工程</h2><p>1、pojo工程为manger聚合工程下的子工程，首先点击选中manger，然后依次点击：鼠标右键——&gt; New ——&gt; Module..<br>如图所示：<br><img src="https://image.charones.com/usr/uploads/2019/11/908816368.png"><br>2、点击后在弹出的创建工程上依此如图所示点击<br><img src="https://image.charones.com/usr/uploads/2019/11/292517979.png"><br>3、点击next后，如图所示配置maven工程信息<br><img src="https://image.charones.com/usr/uploads/2019/11/3080248082.png"><br>4、点击next直至finish<br>5、修改pojo的pom工程文件，如图所示：<br><img src="https://image.charones.com/usr/uploads/2019/11/1802667684.png"><br>6、此时pojo子工程创建完毕，这时再去查看manger聚合工程的pom文件，里面就加入一个刚创建pojo模块<br>如图：<br><img src="https://image.charones.com/usr/uploads/2019/11/2810311382.png"></p>
<hr>
<h2 id="省略"><a href="#省略" class="headerlink" title="省略"></a>省略</h2><p><strong>剩余的dao，interface，service都属于manger聚合工程下的子工程，创建方式和pojo一致，不一致的地方就是打包方式，打包方式根据实际工程而定。</strong><br><strong>web工程不属于聚合工程下的子工程，它的创建方式就和common工程一致，但打包方式为war包，根据工程而定，选择maven工程的模板选择为：</strong><br><img src="https://image.charones.com/usr/uploads/2019/11/2215964992.png"><br>选择webapp是因为它可以自动为你创建web.xml等文件。</p>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>以上就是在IDEA工具下创建maven聚合工程的步骤，之前一直用eclipse来创建，这次eclipse抽风后，就转战IDEA了，也就算是做为一个笔记，方便日后查看。</p>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>使用git将本地源码上传到github</title>
    <url>/archives/51.html</url>
    <content><![CDATA[<p><img src="https://image.charones.com/usr/uploads/2019/09/3269077972.jpg"></p>
<span id="more"></span>


<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大大小小的项目也做了很多项目，但一直都是在电脑本地存储，而今突然想把这些项目托管到github上，于是就整理了这篇文章，利用git将本地项目上传到GitHub仓库中。</p>
<hr>
<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><p>Git是一个<strong>分布式</strong>版本控制系统，用于对项目的版本控制，当然也有<strong>集中式</strong>版本控制系统，比如：SVN。最初 Git 的开发是为了辅助 Linux 内核开发的过程，后来慢慢的在很多其他自由软件项目中也使用了 Git。</p>
<h2 id="何为GitHub"><a href="#何为GitHub" class="headerlink" title="何为GitHub"></a>何为GitHub</h2><p>gitHub是国外的一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。国内的也有托管平台，比如：码云（Gitee）。</p>
<h2 id="Github操作"><a href="#Github操作" class="headerlink" title="Github操作"></a><strong>Github操作</strong></h2><p>先在GitHub上创建一个项目，目的是用于把本地的项目上传到该远程仓库中，在此引用网上的一张图（看后一目了然）如下图：<br><img src="https://img-blog.csdn.net/20180704092925840?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3NzI1MDAz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p>
<h2 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a><strong>Git操作</strong></h2><p><strong>第一步</strong><br>打开Git Bash，在命令行中cd进入项目目录中<br><img src="https://image.charones.com/usr/uploads/2019/09/562919979.png"><br>进入后输入命令：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">init</span></span><br></pre></td></tr></table></figure>
<p>作用：在当前项目的目录中生成本地的git管理（会在当前目录下多了一个.git文件夹）</p>
<p><strong>第二步</strong><br>输入命令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git <span class="builtin-name">add</span> .</span><br></pre></td></tr></table></figure>
<p><img src="https://image.charones.com/usr/uploads/2019/09/181607367.png"><br>作用：将项目上所有的文件添加到仓库中的意思，如果想添加某个特定的文件，只需把.换成这个特定的文件名即可</p>
<p><strong>第三步</strong><br>输入命令：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">&quot;提交更新&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://image.charones.com/usr/uploads/2019/09/830437848.png"><br>作用：表示你对这次提交的注释，双引号里面的内容可以根据个人的需要<br>改。</p>
<p><em><strong>输入完后会出现输入自己的账号或者姓名的提示，如图：</strong></em></p>
<p><img src="https://image.charones.com/usr/uploads/2019/09/3339086964.png"><br>这时用上面提示的代码输入自己的邮箱或名字。<br>如命令：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">git remote <span class="keyword">add </span><span class="keyword">origin </span>&lt;远程github地址&gt;</span><br></pre></td></tr></table></figure>
<p>&lt;&gt;中为远程地址，实际输入命令没有&lt;&gt;符号，后面直接跟地址</p>
<p>输入后再输入git commit -m “提交更新”命令时就会成功。</p>
<p><strong>第四步</strong><br>输入命令：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>
<p><img src="https://image.charones.com/usr/uploads/2019/09/252055681.png"><br>作用：将本地项目上传到远程GitHub仓库中<br>这是如果在远程项目中有存在的文件，则需要先将远程仓库中项目下载到本地，再进行提交，也就是先<strong>更新再提交</strong>，不然就会出现如下错误，如图：<br><img src="https://image.charones.com/usr/uploads/2019/09/2980647582.png"><br>这就是版本不一致造成的，这时需要输入以下命令：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">git pull <span class="comment">--rebase origin master</span></span><br></pre></td></tr></table></figure>
<p>作用：抓取并合并远程仓库到本地</p>
<p>最后再执行上传命令则就成功将项目上传到GitHub仓库中<br>如图：<br><img src="https://image.charones.com/usr/uploads/2019/09/43087761.png"></p>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>以上就是利用Git将本地项目上传到GitHub的过程，其实很早就用Git将项目上传到GitHub中了，但对这套流程一直没做过总结与记录，慢慢的有时会遗忘一些命令的使用，于是写下这篇文章作为记录，好记性不如烂笔头，以便日后查看与记忆。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot向后台传参的若干种方式</title>
    <url>/archives/84.html</url>
    <content><![CDATA[<p><img src="https://image.charones.com/usr/uploads/2019/11/3476319186.jpg"></p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说到<strong>传参</strong>肯定大家都不陌生，从事开发的更可以可以说是天天遇到了，这篇文章也就是主要记录以下传参的各种方式，因为经常使用的是SpringBoot来开发，所以就拿SpringBoot来举例，记录前端向后端传参的若干种方式。</p>
<h2 id="普通传参-前端参数与后端形参名称一致"><a href="#普通传参-前端参数与后端形参名称一致" class="headerlink" title="普通传参(前端参数与后端形参名称一致)"></a>普通传参(前端参数与后端形参名称一致)</h2><p><strong>前端代码：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> param = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">&#x27;#btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span> : <span class="string">&#x27;/WeChart/items.do&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span> : <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span> : param,</span><br><span class="line">        <span class="attr">dataType</span> : <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span> : <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(m)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>后端代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/items&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">charon</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    logger.info(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>后台结果：</strong>name=张三</p>
<h2 id="普通传参-前端参数与后端形参名称不一致"><a href="#普通传参-前端参数与后端形参名称不一致" class="headerlink" title="普通传参(前端参数与后端形参名称不一致)"></a>普通传参(前端参数与后端形参名称不一致)</h2><p><strong>前端代码：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> param = &#123;</span><br><span class="line">    <span class="string">&quot;dcc&quot;</span> : <span class="string">&quot;李四&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span> : <span class="string">&#x27;/WeChart/items2.do&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span> : <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span> : param,</span><br><span class="line">        <span class="attr">dataType</span> : <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span> : <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(m)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>后端代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/items2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">charon2</span><span class="params">(<span class="meta">@RequestParam(&quot;dcc&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">    logger.info(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当前端参数名称和后端不一致时可以使用RequestParam注解，请求参数的参数名,可以作为参数映射名称<br><strong>后台结果：</strong>name=李四</p>
<h2 id="pojo实体类传参"><a href="#pojo实体类传参" class="headerlink" title="pojo实体类传参"></a>pojo实体类传参</h2><p><strong>前端代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var param = &#123;</span><br><span class="line">    &quot;users&quot; : &quot;账户&quot;,</span><br><span class="line">    &quot;password&quot; : &quot;密码&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(&#x27;#btn&#x27;).click(function () &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url : &#x27;/WeChart/items3.do&#x27;,</span><br><span class="line">        type : &#x27;post&#x27;,</span><br><span class="line">        data : param,</span><br><span class="line">        dataType : &#x27;json&#x27;,</span><br><span class="line">        success : function (m) &#123;</span><br><span class="line">            console.log(m)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>后端代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/items3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">charon3</span><span class="params">(Pusers pusers)</span> </span>&#123;</span><br><span class="line">    logger.info(pusers.getUsers());</span><br><span class="line">    logger.info(pusers.getPassword());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实体类代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pusers</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String users;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//省略get/set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前端参数名称对应实体类中的属性名称，后端形参可以直接用实体类来表示<br><strong>后台结果：</strong>users=账户，password=密码</p>
<h2 id="多参无实体类传参一"><a href="#多参无实体类传参一" class="headerlink" title="多参无实体类传参一"></a>多参无实体类传参一</h2><p><strong>前端代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> param = &#123;</span><br><span class="line">    <span class="string">&quot;users&quot;</span> : <span class="string">&quot;账户&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span> : <span class="string">&quot;密码&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;我的名字&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">param = <span class="built_in">JSON</span>.stringify(param);<span class="comment">//将对象转为json串</span></span><br><span class="line">$(<span class="string">&#x27;#btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span> : <span class="string">&#x27;/WeChart/items4.do&#x27;</span>,</span><br><span class="line">        <span class="attr">contentType</span> : <span class="string">&quot;application/json;charset=UTF-8&quot;</span>,</span><br><span class="line">        <span class="attr">data</span> : param,</span><br><span class="line">        <span class="attr">type</span> : <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">dataType</span> : <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span> : <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(m)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>后端代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/items4&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">charon4</span><span class="params">(<span class="meta">@RequestBody</span> String map)</span> </span>&#123;</span><br><span class="line">    logger.info(map);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>后端结果：</strong>{“users”:”账户”,”password”:”密码”,”name”:”我的名字”}</p>
<h2 id="多参无实体类传参二"><a href="#多参无实体类传参二" class="headerlink" title="多参无实体类传参二"></a>多参无实体类传参二</h2><p><strong>前端代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> param = &#123;</span><br><span class="line">    <span class="string">&quot;users&quot;</span> : <span class="string">&quot;账户&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span> : <span class="string">&quot;密码&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;我的名字&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span> : <span class="string">&#x27;/WeChart/items5.do&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span> : param,</span><br><span class="line">        <span class="attr">type</span> : <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">dataType</span> : <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span> : <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(m)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>后端代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/items5&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">charon5</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">    logger.info(map.toString());</span><br><span class="line">    logger.info((String) map.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    logger.info((String) map.get(<span class="string">&quot;users&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>后端结果：</strong>{users=账户, password=密码, name=我的名字}，我的名字，账户</p>
<h2 id="传递数组"><a href="#传递数组" class="headerlink" title="传递数组"></a>传递数组</h2><p><strong>前端代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> param = &#123;</span><br><span class="line">   <span class="string">&quot;ids&quot;</span> : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span> : <span class="string">&#x27;/WeChart/items6.do&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span> : param,</span><br><span class="line">        <span class="attr">type</span> : <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">dataType</span> : <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span> : <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(m)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>后端代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/items6&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">charon6</span><span class="params">(<span class="meta">@RequestParam(value = &quot;ids[]&quot;)</span> Integer[] ids)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;数据：&#123;&#125;&quot;</span>, Arrays.asList(ids));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>后端结果：</strong>[1, 2, 3]</p>
<h2 id="传递集合"><a href="#传递集合" class="headerlink" title="传递集合"></a>传递集合</h2><p><strong>前端代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> param = &#123;</span><br><span class="line">      <span class="string">&quot;ids&quot;</span> : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   $(<span class="string">&#x27;#btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       $.ajax(&#123;</span><br><span class="line">           <span class="attr">url</span> : <span class="string">&#x27;/WeChart/items7.do&#x27;</span>,</span><br><span class="line">           <span class="attr">data</span> : param,</span><br><span class="line">           <span class="attr">type</span> : <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">           <span class="attr">dataType</span> : <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">           <span class="attr">success</span> : <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(m)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>
<p><strong>后端代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/items7&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">charon7</span><span class="params">(<span class="meta">@RequestParam(value = &quot;ids[]&quot;)</span> List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;数据：&#123;&#125;&quot;</span>, ids.toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>后端结果：</strong>[1, 2, 3]</p>
<h2 id="传递复杂性参数"><a href="#传递复杂性参数" class="headerlink" title="传递复杂性参数"></a>传递复杂性参数</h2><p><strong>前端代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dcc = [];</span><br><span class="line">   <span class="keyword">var</span> lists = [&#123;</span><br><span class="line">       <span class="string">&quot;users&quot;</span> : <span class="string">&quot;张三1&quot;</span>,</span><br><span class="line">       <span class="string">&quot;password&quot;</span> : <span class="string">&quot;密码1&quot;</span></span><br><span class="line">   &#125;,&#123;</span><br><span class="line">       <span class="string">&quot;users&quot;</span> : <span class="string">&quot;张三2&quot;</span>,</span><br><span class="line">       <span class="string">&quot;password&quot;</span> : <span class="string">&quot;密码2&quot;</span></span><br><span class="line">   &#125;];</span><br><span class="line">   <span class="keyword">var</span> user =&#123;</span><br><span class="line">       <span class="string">&quot;username&quot;</span> : <span class="string">&quot;张三&quot;</span></span><br><span class="line">   &#125;;</span><br><span class="line">   user.lists = lists;<span class="comment">//向对象种添加新属性</span></span><br><span class="line">   dcc.push(user);</span><br><span class="line">   $(<span class="string">&#x27;#btn&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       $.ajax(&#123;</span><br><span class="line">           <span class="attr">url</span> : <span class="string">&#x27;/WeChart/items9.do&#x27;</span>,</span><br><span class="line">           <span class="attr">data</span> : <span class="built_in">JSON</span>.stringify(dcc),</span><br><span class="line">          <span class="attr">contentType</span> : <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">           <span class="attr">type</span> : <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">           <span class="attr">success</span> : <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(m)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>后端代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/items9&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">charon9</span><span class="params">(<span class="meta">@RequestBody</span> String maps)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;数据：&#123;&#125;&quot;</span>, maps);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>后端结果：</strong>[{“username”:”张三”,”lists”:[{“users”:”张三1”,”password”:”密码1”},{“users”:”张三2”,”password”:”密码2”}]}]</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>@RequestBody注解，必须与contentType 类型application/json配合使用</li>
<li>@RequestParam注解，必须与contentTyp类型application/x-www-form-urlencoded配合使用，其为默认类型。</li>
<li>JSON.stringify()把对象类型转换为字符串类型，配合@RequestBody注解和contentType 类型application/json使用。</li>
</ol>
<p><em><strong>以上就是Springboot传递参数的几种举例，每个方法都是经过博主实际测试通过的，在此分享同时也算是做个记录。</strong></em></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Redisson实现订单超时自动关闭(高可用)</title>
    <url>/archives/86.html</url>
    <content><![CDATA[<p><img src="https://image.charones.com/usr/uploads/2020/04/545024470.jpg"></p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>艺术来源于生活，技术来源于业务，由于原业务上的需求，需要做一个用户下单后超过一定时间内没有支付自动取消订单，说白了就是一个超时自动取消的功能，这种场景恐怕是非常非常常见的一个业务需求了，在此记录下使用redis来实现此功能。</p>
<h2 id="业务分析"><a href="#业务分析" class="headerlink" title="业务分析"></a>业务分析</h2><p>当产品经理说到超时取消时，第一时间想到的就是延迟队列，市面上也有很多常见的消息中间件，例如：RabbitMQ，RocketMQ，ActiveMQ，Kafka，Redis，ZeroMQ等等，都可以实现此功能，虽然轮子不断造，但合适自己的才是最好的。</p>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>1、RabbitMQ：一开始选中的就是它，它有一个实现延迟队列的插件，正好符合要求，但后来和技术经理沟通下，由于自身服务架构来说，此方法最终被石沉大海了，此方案被pass掉。</p>
<p>2、Redis：第二个方案是基于Redis，使用Redis的key过期通知，在服务端捕获这个失效通知来处理业务，一开始是可行的，但后来考虑到高可用，而且当接收通知的服务宕机时，就会出现掉单，丢失消息的情况，于是此方法也被Pass掉。</p>
<p>3、Redis+Redisson：经过几次考虑与测试后，最终使用了此技术来实现超时订单取消的功能开发。</p>
<h2 id="技术介绍"><a href="#技术介绍" class="headerlink" title="技术介绍"></a>技术介绍</h2><blockquote>
<p>Redisson：Redisson在基于NIO的Netty框架上，充分的利用了Redis键值数据库提供的一系列优势，在Java实用工具包中常用接口的基础上，为使用者提供了一系列具有分布式特性的常用工具类。使得原本作为协调单机多线程并发程序的工具包获得了协调分布式多机多线程并发系统的能力，大大降低了设计和研发大规模分布式系统的难度。同时结合各富特色的分布式服务，更进一步简化了分布式环境中程序相互之间的协作。</p>
</blockquote>
<p>中文文档：<a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95">https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95</a></p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p><strong>pom.xml依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Redisson的配置类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisQueueConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接redis的地址</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//redis的端口号</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//redis的密码</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redissonClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//此处为单机配置，高可用配置请往下看</span></span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        <span class="keyword">if</span> (password.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            config.setCodec(<span class="keyword">new</span> org.redisson.client.codec.StringCodec());</span><br><span class="line">            config.useSingleServer().setAddress(<span class="string">&quot;redis://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port).setDatabase(<span class="number">2</span>).setTimeout(<span class="number">5000</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            config.useSingleServer().setAddress(<span class="string">&quot;redis://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port).setPassword(password).setDatabase(<span class="number">2</span>).setTimeout(<span class="number">5000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>伪下单代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedissonClient redissonClient;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestController</span><span class="params">(RedissonClient redissonClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redissonClient = redissonClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 目标队列</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RBlockingQueue&lt;String&gt; blockingRedPacketQueue</span><br><span class="line">                = redissonClient.getBlockingQueue(<span class="string">&quot;userOrderKey&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 定时任务将到期的元素转移到目标队列</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RDelayedQueue&lt;String&gt; delayedRedPacketQueue</span><br><span class="line">                = redissonClient.getDelayedQueue(blockingRedPacketQueue);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 123456代表订单号，放入队列中</span></span><br><span class="line"><span class="comment">         * 设置10秒后到期</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        delayedRedPacketQueue.offer(<span class="string">&quot;123456&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>处理超时订单代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoStart</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(AutoStart.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        RBlockingQueue&lt;String&gt; blockingRedPacketQueue</span><br><span class="line">                = redissonClient.getBlockingQueue(<span class="string">&quot;userOrderKey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        RDelayedQueue&lt;String&gt; delayedRedPacketQueue</span><br><span class="line">                = redissonClient.getDelayedQueue(blockingRedPacketQueue);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果当前没有失效的订单，则此循环会暂时阻塞</span></span><br><span class="line"><span class="comment">             * 取出超时订单信息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            String redPacket = blockingRedPacketQueue.take();</span><br><span class="line">            LOGGER.info(<span class="string">&quot;订单号:&#123;&#125;过期失效&quot;</span>,redPacket);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 处理相关业务逻辑</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="高可用配置"><a href="#高可用配置" class="headerlink" title="高可用配置"></a>高可用配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主从部署方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Config config = <span class="keyword">new</span> Config();</span><br><span class="line">config.useMasterSlaveServers()</span><br><span class="line">        <span class="comment">//设置redis主节点</span></span><br><span class="line">        .setMasterAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>)</span><br><span class="line">        <span class="comment">//设置redis从节点</span></span><br><span class="line">        .addSlaveAddress(<span class="string">&quot;redis://127.0.0.2:6379&quot;</span>, <span class="string">&quot;redis://127.0.0.3:6379&quot;</span>);</span><br><span class="line">RedissonClient redisson = Redisson.create(config);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集群部署方式</span></span><br><span class="line"><span class="comment"> * cluster方式至少6个节点</span></span><br><span class="line"><span class="comment"> * 3主3从，3主做sharding，3从用来保证主宕机后可以高可用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Config config = <span class="keyword">new</span> Config();</span><br><span class="line">config.useClusterServers()</span><br><span class="line">        .setScanInterval(<span class="number">2000</span>)<span class="comment">//集群状态扫描间隔时间，单位是毫秒</span></span><br><span class="line">        .addNodeAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>)</span><br><span class="line">        .addNodeAddress(<span class="string">&quot;redis://127.0.0.2:6379&quot;</span>)</span><br><span class="line">        .addNodeAddress(<span class="string">&quot;redis://127.0.0.3:6379&quot;</span>)</span><br><span class="line">        .addNodeAddress(<span class="string">&quot;redis://127.0.0.4:6379&quot;</span>)</span><br><span class="line">        .addNodeAddress(<span class="string">&quot;redis://127.0.0.5:6379&quot;</span>)</span><br><span class="line">        .addNodeAddress(<span class="string">&quot;redis://127.0.0.6:6379&quot;</span>);</span><br><span class="line">RedissonClient redissonClient = Redisson.create(config);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 哨兵部署方式</span></span><br><span class="line"><span class="comment"> * sentinel是采用 Paxos拜占庭协议，一般sentinel至少3个节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Config config = <span class="keyword">new</span> Config();</span><br><span class="line">config.useSentinelServers()</span><br><span class="line">        .setMasterName(<span class="string">&quot;my-sentinel-name&quot;</span>)</span><br><span class="line">        .addSentinelAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>)</span><br><span class="line">        .addSentinelAddress(<span class="string">&quot;redis://127.0.0.2:6379&quot;</span>)</span><br><span class="line">        .addSentinelAddress(<span class="string">&quot;redis://127.0.0.3:6379&quot;</span>);</span><br><span class="line">RedissonClient redisson = Redisson.create(config);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h2><p>访问hello接口后，等待10秒，控制台返回如下</p>
<p><img src="https://image.charones.com/usr/uploads/2020/10/4118908773.png"></p>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>还是那句话，技术类型越来越多，轮子不停造，选对技术合适自己业务的才是最好的，无论是JDK内置的延迟队列还是基于时间轮算法的队列，都无法保证生产系统的高可用性，而Redisson很好的解决了这个问题。</p>
]]></content>
      <categories>
        <category>Redisson</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Redis</tag>
        <tag>Redisson</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM购物商城项目+后台管理</title>
    <url>/archives/64.html</url>
    <content><![CDATA[<p><img src="https://image.charones.com/usr/uploads/2019/10/1011996262.jpg"></p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本项目是在学习SSM框架后的又一个产物，同时也是博主当年拿来当作毕业设计的项目，之前写的都是后台管理系统，写来写去千篇一律，于是乎就想写个另一种类型的项目，同时也是对自己所学知识的巩固，于是此项目就问世了。</p>
<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>此项目是一个买生鲜PC端的<strong>简单的</strong>商城项目，包含<strong>用户端</strong>和<strong>管理平台</strong>，至于为什么说它简单，是因为里面并没有完善的商城项目该有的功能，但基础的功能还是有的，其项目主要目的还是用来巩固自己所学的知识，毕竟光学不练假把式。</p>
<h2 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h2><p><strong>用户端</strong></p>
<ul>
<li>登陆</li>
<li>注册</li>
<li>商品列表</li>
<li>商品分类</li>
<li>商品详情</li>
<li>用户中心</li>
<li>购物车</li>
<li>我的的订单</li>
<li>地址管理</li>
<li>用户下单</li>
<li>订单管理</li>
</ul>
<p><strong>管理平台</strong></p>
<ul>
<li>登陆</li>
<li>类别管理</li>
<li>商品管理</li>
<li>订单管理</li>
<li>会员管理</li>
<li>地址管理</li>
<li>系统设置</li>
<li>权限管理</li>
</ul>
<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p><strong>后端</strong></p>
<ul>
<li>Spring</li>
<li>SpirngMVC</li>
<li>Mybatis</li>
<li>Mysql</li>
<li>Maven</li>
<li>tomcat</li>
<li>Log4j2</li>
</ul>
<p><strong>前端</strong></p>
<ul>
<li>html</li>
<li>css</li>
<li>Jquery</li>
<li>Layui</li>
<li>Ajax</li>
</ul>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><h2 id="用户端"><a href="#用户端" class="headerlink" title="用户端"></a>用户端</h2><p><img src="https://image.charones.com/usr/uploads/2020/10/4249965181.png"></p>
<p><img src="https://image.charones.com/usr/uploads/2020/10/1137716480.png"></p>
<p><img src="https://image.charones.com/usr/uploads/2020/10/2359438592.png"></p>
<p><img src="https://image.charones.com/usr/uploads/2020/10/3134085559.png"></p>
<h2 id="管理端"><a href="#管理端" class="headerlink" title="管理端"></a>管理端</h2><p><img src="https://image.charones.com/usr/uploads/2020/10/2848771081.png"><br><img src="https://image.charones.com/usr/uploads/2020/10/2076109169.png"></p>
<h2 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h2><p>地址：<a href="https://github.com/Snykta/Shop-SSM">https://github.com/Snykta/Shop-SSM</a></p>
<h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>此项目虽然没有完善的功能，但基础的该有的还是有的，页面虽然丑点(这不重要，手动狗头~~)，但功能是逻辑是正常的，对于初学SSM框架还是有或多或少的帮助的，当然也可以在此项目基础上进行完善，二次开发，这都是可以的。</p>
<blockquote>
<p>老骥伏枥，志在千里。</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaWeb项目</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次关于MybatisPlus枚举类映射的异常</title>
    <url>/archives/88.html</url>
    <content><![CDATA[<p><img src="https://image.charones.com/usr/uploads/2020/04/3037443624.jpg"></p>
<span id="more"></span>

<p><strong>待更新….</strong></p>
]]></content>
      <categories>
        <category>MybatisPlus</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Mysql并挂载目录后运行</title>
    <url>/archives/104.html</url>
    <content><![CDATA[<p><img src="https://image.charones.com/usr/uploads/2020/10/3405473456.png"></p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记一次MySql数据库读写分离的的功能，其中里面涉及到了数据库的主从复制，并且是在Docker中的运行的MySql实例，于是乎就写下这篇文章，记录在Docker中安装MySql的步骤。</p>
<h2 id="一、拉取镜像"><a href="#一、拉取镜像" class="headerlink" title="一、拉取镜像"></a>一、拉取镜像</h2><p>1、执行如下命令拉取镜像：<br>本次使用的版本号是8.0.18</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:8.0.18</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong>记得配置镜像加速器，否则拉取镜像将非常慢，原因你懂的。</p>
<p>2、查看镜像是否存在：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h2 id="二、配置并运行容器"><a href="#二、配置并运行容器" class="headerlink" title="二、配置并运行容器"></a>二、配置并运行容器</h2><p>1、运行容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3308:3306 --name mysql-server-01 -e MYSQL_ROOT_PASSWORD=&quot;123456&quot; mysql:8.0.18</span><br></pre></td></tr></table></figure>
<p>2、查看是否运行成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<p>如图所示则成功：<br><img src="https://image.charones.com/usr/uploads/2020/10/2194755708.png"></p>
<p>3、进入容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql-server-01 bash</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong>mysql-server-01就是运行时设置的容器名称</p>
<p>4、查看容器内mysql配置文件路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql --help | grep my.cnf</span><br></pre></td></tr></table></figure>
<p>如图：<img src="https://image.charones.com/usr/uploads/2020/10/1746848017.png"></p>
<p>5、复制配置文件到宿主机目录<br>找到容器路径后，退出容器(ctrl+d)，在<strong>宿主机</strong>下执行如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp mysql-server-01:/etc/mysql/my.cnf /mydocker/mysql-server-docker/mysql-01/conf</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong>宿主机路径位置一定要创建好</p>
<p>6、重新运行容器<br>配置好配置文件后，重新运行容器，将容器的配置文件指向宿主机的配置文件<br>执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart=always --privileged=true -d -v /mydocker/mysql-server-docker/mysql-01/data/:/var/lib/mysql -v /mydocker/mysql-server-docker/mysql-01/conf/my.cnf:/etc/mysql/my.cnf -p 3308:3306 --name mysql-server-01 -e MYSQL_ROOT_PASSWORD=&quot;123456&quot; mysql:8.0.18</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong>运行新容器时记得删除就容器，或者不删除，但容器名字不能相同，端口号不能被占用！！</p>
<h2 id="三、测试连接"><a href="#三、测试连接" class="headerlink" title="三、测试连接"></a>三、测试连接</h2><p>1、进行容器，开启远程访问<br>执行如下命令连接mysql：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure>

<p>2、进入名字为mysql的库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql</span><br></pre></td></tr></table></figure>
<p>3、配置远程访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE user SET `Host` = &#x27;%&#x27; WHERE `User` = &#x27;root&#x27; LIMIT 1;</span><br></pre></td></tr></table></figure>
<p>4、刷新生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>5、连接成功<br><img src="https://image.charones.com/usr/uploads/2020/10/3462937496.png"></p>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>以上就是在Docker中安装MySql的步骤，可以配置集群，主从复制等，如果测试连接不上，可以检查以下：端口是否开放，端口是否被占用，映射是否成功，容器是否运行，安全组或者防火墙是否打开等这几处来检测。</p>
]]></content>
      <categories>
        <category>Docker</category>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql数据库实现主从复制</title>
    <url>/archives/101.html</url>
    <content><![CDATA[<p><img src="https://image.charones.com/usr/uploads/2020/10/2151511063.png"></p>
<span id="more"></span>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>数据库的主从复制又可称为主从同步，指一台服务器充当主数据库服务器，另一台或多台服务器充当从数据库服务器，主服务器中的数据自动复制到从服务器之中。对于多级复制，数据库服务器即可充当主机，也可充当从机。MySQL主从复制的基础是主服务器对数据库修改记录二进制日志，从服务器通过主服务器的二进制日志自动执行更新。一句话表示就是，主数据库做什么，从数据库就跟着做什么。</p>
</blockquote>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>1.Master 数据库只要发生变化，立马记录到Binary log 日志文件中<br>2.Slave数据库启动一个I/O thread连接Master数据库，请求Master变化的二进制日志<br>3.Slave I/O获取到的二进制日志，保存到自己的Relay log 日志文件中。<br>4.Slave 有一个 SQL thread定时检查Realy log是否变化，变化那么就更新数据<br><img src="https://image.charones.com/usr/uploads/2020/10/1832236725.png"></p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li>实现服务器负载均衡</li>
<li>通过复制实现数据的异地备份</li>
<li>提高数据库系统的可用性</li>
<li>实现业务上的读写分离</li>
</ul>
<hr>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>本地安装两个mysql，或者使用虚拟机，或者使用docker安装，需要准备两个mysql，本文使用的是docker方式安装。<br>具体安装方法：<a href="https://charones.com/archives/104.html">https://charones.com/archives/104.html</a></p>
<blockquote>
<p>宿主机 centos7 mysql:8.0.21<br>mysql1(master): 172.17.0.3:3308<br>mysql2(slave): 172.17.0.2:3309</p>
</blockquote>
<h2 id="主数据库配置"><a href="#主数据库配置" class="headerlink" title="主数据库配置"></a>主数据库配置</h2>]]></content>
      <categories>
        <category>Docker</category>
        <category>MySql</category>
        <category>服务搭建</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>Python+OpenCV实现对指针式仪表的识别</title>
    <url>/archives/91.html</url>
    <content><![CDATA[<p><img src="https://image.charones.com/usr/uploads/2020/10/3493261755.jpg"></p>
<span id="more"></span>

<p>待更….</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
</search>
