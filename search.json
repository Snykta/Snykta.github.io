[{"title":"记录一次Hibernate一对多插入问题","url":"/archives/start.html","content":"<p><img src=\"https://image.charones.com/usr/uploads/2019/07/1609932867.png\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>   在一次web项目中，其场景为员工与部门的关联关系，在员工表生成一个外键对应其部门表的主键，配置的为一对多关联关系，当插入数据时却出现了员工表外键为null的情况。</p>\n<hr>\n<h2 id=\"员工类\"><a href=\"#员工类\" class=\"headerlink\" title=\"员工类\"></a>员工类</h2><p>基于hibernate注解配置，getter与setter方法不再列出，只列出了其对应字段。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name=&quot;p_users&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">P_user</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">@Id</span></span><br><span class=\"line\"><span class=\"meta\">@GeneratedValue(generator=&quot;mygener&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//整长策略</span></span><br><span class=\"line\"><span class=\"meta\">@GenericGenerator(name=&quot;mygener&quot;,strategy=&quot;native&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"><span class=\"meta\">@Column(name=&quot;names&quot;,length=20,nullable=true,unique=false)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String names;</span><br><span class=\"line\"><span class=\"meta\">@Column(name=&quot;sex&quot;,length=10,nullable=true,unique=false)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\"><span class=\"meta\">@Column(name=&quot;iphone&quot;,length=40,nullable=true,unique=false)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String iphone;</span><br><span class=\"line\"><span class=\"meta\">@Column(name=&quot;email&quot;,length=45,nullable=true,unique=false)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String email;</span><br><span class=\"line\"><span class=\"meta\">@Column(name=&quot;states&quot;,length=10,nullable=true,unique=false)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String states;</span><br></pre></td></tr></table></figure>\n<h2 id=\"部门类\"><a href=\"#部门类\" class=\"headerlink\" title=\"部门类\"></a>部门类</h2><p>基于hibernate注解配置，getter与setter方法不再列出，只列出了其对应字段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name=&quot;dept&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dept</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">@Id</span></span><br><span class=\"line\"><span class=\"meta\">@GeneratedValue(generator=&quot;mygener&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@GenericGenerator(name=&quot;mygener&quot;,strategy=&quot;native&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\"><span class=\"meta\">@Column(name=&quot;ename&quot;,length=30,nullable=true,unique=false)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String ename;</span><br><span class=\"line\"><span class=\"meta\">@Column(name=&quot;datas&quot;,length=40,nullable=true,unique=false)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String datas;</span><br><span class=\"line\"><span class=\"comment\">//注解配置一对多关联关系</span></span><br><span class=\"line\"><span class=\"meta\">@OneToMany(targetEntity=P_user.class,cascade=CascadeType.ALL)</span></span><br><span class=\"line\"><span class=\"comment\">//外键名称</span></span><br><span class=\"line\"><span class=\"meta\">@JoinColumn(name=&quot;dept_id&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Set&lt;P_user&gt; puser = <span class=\"keyword\">new</span> HashSet&lt;P_user&gt;();</span><br></pre></td></tr></table></figure>\n<h2 id=\"原Test测试类\"><a href=\"#原Test测试类\" class=\"headerlink\" title=\"原Test测试类\"></a>原Test测试类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">SessionFactory sessionFactory = SessionFacUtil.getsessionFactory();<span class=\"comment\">//加载配置</span></span><br><span class=\"line\">Session session = sessionFactory.openSession();<span class=\"comment\">//创建session\t</span></span><br><span class=\"line\">Transaction tx =  session.beginTransaction();<span class=\"comment\">//开启事务</span></span><br><span class=\"line\">P_user user = <span class=\"keyword\">new</span> P_user ();</span><br><span class=\"line\">user.setNames(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">Set&lt;P_user&gt; sets = <span class=\"keyword\">new</span> HashSet&lt;P_user&gt;();</span><br><span class=\"line\">sets.add(user);</span><br><span class=\"line\"><span class=\"comment\">//查询已有的部门</span></span><br><span class=\"line\">Dept dept = session.get(Dept.class, <span class=\"number\">12</span>);</span><br><span class=\"line\"><span class=\"comment\">//将该人员类加入到部门的set集合中，并产生外键联系</span></span><br><span class=\"line\">dept.setUsers(sets);</span><br><span class=\"line\">session.save(dept);</span><br><span class=\"line\">tx.commit();</span><br><span class=\"line\">session.close();</span><br><span class=\"line\">sessionFactory.close();</span><br></pre></td></tr></table></figure>\n<p>运行测试无异常，查看数据库也正常插入了数据<br>数据库显示为：<br><img src=\"https://image.charones.com/usr/uploads/2019/07/3283312814.png\"></p>\n<p>可见以正常插入，并与产生了外键，可当再次运行测试类，再次插入时出现了问题，新运行的插入的插入成功了，可第一次插入的数据外键却变成了null，也就是说，只能存在这一个外键，不能有两个。<br>如图：<br><img src=\"https://image.charones.com/usr/uploads/2019/07/3252239438.png\"></p>\n<p>这就让我感到很是疑惑，一对多，由表可知，一个部门下可以有多个部门的，不应该会出现这种null的情况的，一开始以为配置的问题，检查了好多配置地方，也在网上搜寻了一大圈，最后还是无果。</p>\n<p>正当我一筹莫展的时候，突然发现了一句关键的话</p>\n<pre><code>Set&lt;P_user&gt; sets = new HashSet&lt;P_user&gt;();\n</code></pre>\n<p>没错，就是它，我怀疑是不是这个set集合的问题，每次运行new后都产生新的集合，然后再把集合加入dept中，再执行数据插入，会不会是这个的影响，于是改造了以下新的测试类</p>\n<h2 id=\"新Test测试类\"><a href=\"#新Test测试类\" class=\"headerlink\" title=\"新Test测试类\"></a>新Test测试类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">SessionFactory sessionFactory = SessionFacUtil.getsessionFactory();<span class=\"comment\">//加载配置</span></span><br><span class=\"line\">Session session = sessionFactory.openSession();<span class=\"comment\">//创建session\t</span></span><br><span class=\"line\">Transaction tx =  session.beginTransaction();<span class=\"comment\">//开启事务</span></span><br><span class=\"line\">P_user user = <span class=\"keyword\">new</span> P_user ();</span><br><span class=\"line\">user.setNames(<span class=\"string\">&quot;张三3&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//查询已有的部门</span></span><br><span class=\"line\">Dept dept = session.get(Dept.class, <span class=\"number\">12</span>);</span><br><span class=\"line\"><span class=\"comment\">//将该人员类加入到该查询出来的dept的set集合中</span></span><br><span class=\"line\">dept.getUsers().add(user);</span><br><span class=\"line\">session.save(dept);</span><br><span class=\"line\">tx.commit();</span><br><span class=\"line\">session.close();</span><br><span class=\"line\">sessionFactory.close();</span><br></pre></td></tr></table></figure>\n<p>测试结果完美通过<br>数据库截图：<br><img src=\"https://image.charones.com/usr/uploads/2019/07/348904703.png\"></p>\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>就是这个每次new的set集合问题，结果执行时有让数据库update的了以下，把第一次插入的数据变为了null。</p>\n<p>一次小小的细节问题，也体现出看来我对hibernate了解学习的还不够透彻，还需努力专研。</p>\n","categories":["持久层框架"],"tags":["Hibernate"]},{"title":"Spring+Struts2+Hibernate后台管理系统","url":"/archives/13.html","content":"<p><img src=\"https://image.charones.com/usr/uploads/2019/07/3323727449.png\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>只学不练假把式，人都是有遗忘性的，这个项目是学习了Spring+Hibernate+Struts2框架后的一个产物，同时也记录了我学习的过程与收获。</p>\n<hr>\n<h2 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h2><p>项目属于一个后台管理系统，进行CRUD操作，具体简介如下：</p>\n<p><strong>项目模块</strong></p>\n<ul>\n<li>普通人员管理</li>\n<li>后台人员管理</li>\n<li>新闻管理</li>\n<li>资源上传下载</li>\n<li>类别管理</li>\n<li>部门管理</li>\n</ul>\n<p><strong>架构方式</strong><br>面向接口开发，三层架构，基于注解方式开发</p>\n<p><strong>请求方式</strong><br>Ajax异步向后台发送请求</p>\n<p><strong>数据库</strong><br>mysql关系型数据库</p>\n<p><strong>开发周期</strong><br>利用空闲时间，独立开发，用时17天</p>\n<p><strong>项目截图</strong><br><img src=\"https://image.charones.com/usr/uploads/2019/09/1993705987.png\"></p>\n<p><em>更多截图请点击获取项目</em></p>\n<hr>\n<h2 id=\"项目获取\"><a href=\"#项目获取\" class=\"headerlink\" title=\"项目获取\"></a>项目获取</h2><p><em>更多详情请获取项目</em></p>\n<p>项目获取地址：<a href=\"https://github.com/Snykta/admin_ssh\">https://github.com/Snykta/admin_ssh</a></p>\n<hr>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>再附上一个曾经写的一个原生的JavaWeb项目(没用任何框架)</p>\n<p>项目地址：<a href=\"https://github.com/Snykta/GalaCMS\">https://github.com/Snykta/GalaCMS</a></p>\n<hr>\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>分享是快乐的，分享是互相进步的，如果项目存在不足缺点，还劳烦请指点迷津，如果是对你的学习路途有了些许帮助，哈哈，那就还请动动小手点个Star。</p>\n","categories":["JavaWeb项目"],"tags":["JavaWeb"]},{"title":"SpringMVC在非Contoller层获取request和response对象","url":"/archives/36.html","content":"<p><img src=\"https://image.charones.com/usr/uploads/2019/07/1458723386.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在SpringMVC中，如果在contoller层获取request和response对象是很好获取的，直接在handler方法参数中可以直接拿到request和response对象，而在非contoller层该如何获取呢？</p>\n<p>答：通过springMVC提供的RequestContextHolder来获取</p>\n<hr>\n<h2 id=\"获取方法\"><a href=\"#获取方法\" class=\"headerlink\" title=\"获取方法\"></a>获取方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">HttpServletResponse response =((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getResponse();</span><br><span class=\"line\"></span><br><span class=\"line\">HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>需要导入的包</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>以上就是在非contoller层获取request和response对象的方法，也算是做一个笔记，防止日后有遗忘。</p>\n","categories":["SpringMVC"],"tags":["SpringMVC"]},{"title":"Mybatis中Mapper传入复杂性参数","url":"/archives/39.html","content":"<p><img src=\"https://image.charones.com/usr/uploads/2019/08/3537748652.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>近期自学了Mybatis框架，学完之后也正在着手写了一个SSM项目，在项目中使用Mybatis持久层框架时，对Mapper.XML传参数时遇到了一些小小的问题，于是在此做个笔记，加深印象。</p>\n<h2 id=\"Mybatis简介\"><a href=\"#Mybatis简介\" class=\"headerlink\" title=\"Mybatis简介\"></a>Mybatis简介</h2><p>持久层框架，是apache下的一个开源项目，使用映射方式，半自动化（需要程序员自己编写Sql语句），相比Hibernate而言学习难度小，上手快。</p>\n<h2 id=\"Mybatis传参类型\"><a href=\"#Mybatis传参类型\" class=\"headerlink\" title=\"Mybatis传参类型\"></a>Mybatis传参类型</h2><ul>\n<li>基本数据类型：int，String，Dete等</li>\n<li>复杂数据类型：Bean实体类，map</li>\n</ul>\n<h2 id=\"传参属性\"><a href=\"#传参属性\" class=\"headerlink\" title=\"传参属性\"></a>传参属性</h2><p>Mybatis中的<strong>parameterType</strong>属性</p>\n<p><em>本文主要记录传入复杂型参数中的Map</em></p>\n<h2 id=\"传入Map-一\"><a href=\"#传入Map-一\" class=\"headerlink\" title=\"传入Map(一)\"></a>传入Map(一)</h2><p><strong>Mapper.XML配置</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--parameterType传入的类型为Map，resultType返回为一个实体类--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;java.util.Map&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;AdminUser&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--#&#123;name&#125;花括号中的值为Map集合中的Key--&gt;</span></span><br><span class=\"line\">SELECT  * FROM USER WHERE username = #&#123;name&#125; AND sex =#&#123;sex&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>Mapper接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数类型为Map，与Mapper.xml中的parameterType参数类型一致</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AdminUser <span class=\"title\">selectUser</span><span class=\"params\">(Map&lt;String, Object&gt; map)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>测试类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义Map集合</span></span><br><span class=\"line\">Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;张小明&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;sex&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//调用dao接口，并传入Map集合</span></span><br><span class=\"line\">对象.selectUser(map);</span><br></pre></td></tr></table></figure>\n<p><strong>测试结果截图</strong><br><img src=\"https://image.charones.com/usr/uploads/2019/08/2856416609.png\"><br>可见已经查询出了该条数据</p>\n<h2 id=\"传入Map-二\"><a href=\"#传入Map-二\" class=\"headerlink\" title=\"传入Map(二)\"></a>传入Map(二)</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--parameterType传入的类型为Map，resultType返回为一个实体类--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;java.util.Map&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;AdminUser&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--#&#123;user.username&#125;花括号中的值为User实体类中属性--&gt;</span></span><br><span class=\"line\">SELECT  * FROM USER WHERE username = #&#123;user.username&#125; AND sex =#&#123;user.sex&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>Mapper接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//参数类型为User实体类，使用@Param注解的作用是给参数命名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AdminUser <span class=\"title\">selectUser</span><span class=\"params\">((<span class=\"meta\">@Param(&quot;user&quot;)</span>AdminUser adminUser)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>测试类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义实体类对象</span></span><br><span class=\"line\">AdminUser u = <span class=\"keyword\">new</span> AdminUser();</span><br><span class=\"line\">u.setSex(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">u.setUname(<span class=\"string\">&quot;张小明&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//调用接口，传入实体类对象</span></span><br><span class=\"line\">对象.selectUser(u);</span><br></pre></td></tr></table></figure>\n<p><strong>测试结果截图</strong><br><img src=\"https://image.charones.com/usr/uploads/2019/08/2856416609.png\"><br>可见已经查询出了该条数据</p>\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>总体来说Mybatis的使用还是比较方便的，但需要对Sql语句有一定的掌握，当然也可以使用generator逆向工程生成Mapper，不过生成的代码也需要自己能够理解能够看懂，但在看懂的前提下，还是需要懂得sql语句，万变不离其宗。</p>\n","categories":["持久层框架"],"tags":["Mybatis"]},{"title":"Spring+SpringMVC+Mybatis后台管理系统","url":"/archives/44.html","content":"<p><img src=\"https://image.charones.com/usr/uploads/2019/08/1239678965.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>距离上一个发布的SSH项目已经有一段时间了，在完成了上一个SSH项目后，于是乎又开始SSM框架的学习，到今为止SSM框架已基本完成，同时做了一个SSM的后台管理系统，以便巩固更多知识点。</p>\n<hr>\n<h2 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h2><p>项目属于后台管理系统，前端样式风格还是沿用了SSH项目的前端样式（其实是不想再调试前端了，把时间放在了后端），后端使用SSM框架，前后端分离，进行CRUD操作。</p>\n<p><strong>项目模块</strong></p>\n<ul>\n<li>普通人员管理</li>\n<li>后台人员管理</li>\n<li>新闻管理</li>\n<li>资源上传</li>\n<li>资源下载</li>\n<li>类别管理</li>\n<li>部门管理</li>\n</ul>\n<p><strong>架构方式</strong><br>前后端分离，面向接口开发，三层架构，部分链接采用了RESTful风格。</p>\n<p><strong>请求方式</strong><br>Ajax异步向后台发送请求</p>\n<p><strong>数据库</strong><br>mysql关系型数据库</p>\n<p><strong>运行环境</strong><br>tomcat9.x</p>\n<p><strong>开发周期</strong><br>自学 + 做项目= 45天</p>\n<p><strong>项目结构图</strong><br><img src=\"https://image.charones.com/usr/uploads/2019/09/2737441036.png\"></p>\n<p><strong>项目截图</strong></p>\n<p><img src=\"https://image.charones.com/usr/uploads/2019/09/4235734422.png\"></p>\n<p><img src=\"https://image.charones.com/usr/uploads/2019/09/2378386128.png\"></p>\n<p><em>更多截图请点击获取项目</em></p>\n<hr>\n<h2 id=\"获取项目\"><a href=\"#获取项目\" class=\"headerlink\" title=\"获取项目\"></a>获取项目</h2><p><em>更多详情请点击获取项目</em></p>\n<p>项目获取地址：<a href=\"https://github.com/Snykta/admin_ssm\">点击直达</a></p>\n<hr>\n<h2 id=\"附加\"><a href=\"#附加\" class=\"headerlink\" title=\"附加\"></a>附加</h2><p>SSH项目：<a href=\"https://www.charones.com/archives/13.html\">SSH后台管理系统</a></p>\n<hr>\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>分享是快乐的，分享是互相进步的，如果项目存在不足缺点，还劳烦请指点迷津，学习我一直在路上，如果是对你的学习路途有了些许帮助，那就还劳烦请动动小手点个Star。</p>\n","categories":["JavaWeb项目"],"tags":["JavaWeb"]},{"title":"IDEA中maven构建的SSM项目mapper绑定失败","url":"/archives/60.html","content":"<p><img src=\"https://image.charones.com/usr/uploads/2019/09/2483435586.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前开发Web项目一直是用eclipse来开发，IDEA也用过，但一直用它来写一些小项目(非web项目)，今天突然想用IDEA来开发web项目，于是说干就干，场景：利用maven构建一个SSM项目。一顿配置操作后把项目构建成了，可当测试时却出现了问题，Mybatis的Mapper一直绑定不上，一直报错。</p>\n<hr>\n<h2 id=\"Bug\"><a href=\"#Bug\" class=\"headerlink\" title=\"Bug\"></a>Bug</h2><p>如图所示：<br><img src=\"https://image.charones.com/usr/uploads/2019/09/2979408028.png\"></p>\n<p>一直提示提示：Invalid bound statement (not found)，意思为绑定语句错误，找不到该方法。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>因为之前一直用eclipse来开发，这个问题还是第一次遇到，首先我先想到是不是配置文件错误，于是把配置文件逐个排查，经过一系列测试排查，发现配置文件并没有错误。没问题后又对代码经过一系列的检查，可也还是没有发现问题。<br><strong>猜想</strong><br>正当我一筹莫展时，突然想到是不是IDEA把项目编译后那些xml配置文件存放的路径的问题，因为IDEA明确了源码和资源文件的放置位置（maven项目），也就是说源码就要会被编译，但当我把xml文件放在java目录下的mian目录中我猜想是不是没被编译到classes中，才导致找不到方法。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>在pom.xml的<build>标签下中加入如下配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--编译resources下的配置，例如Spring的配置--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--编译java下的配置，例如Mybatis的Mapper--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span>  </span><br></pre></td></tr></table></figure>\n<p>意思为：xml配置文件随同java编译后的class文件一同copy到相应的class目录</p>\n<p><strong>结果</strong><br>经过测试果然和我猜想的一样，最后运行成功，方法成功被调用。</p>\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>eclipse编译项目会自动将xml配置文件编译进classes,IDEA却不行，看来还是对IDEA的使用不熟练，之前一直用eclipse开发，不经常用IDEA，突然换个开发工具出现了太多问题，还是不够熟练，革命还未胜利，同志还须再努力。</p>\n","categories":["maven"],"tags":["maven","IDEA"]},{"title":"使用git将本地源码上传到github","url":"/archives/51.html","content":"<p><img src=\"https://image.charones.com/usr/uploads/2019/09/3269077972.jpg\"></p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>大大小小的项目也做了很多项目，但一直都是在电脑本地存储，而今突然想把这些项目托管到github上，于是就整理了这篇文章，利用git将本地项目上传到GitHub仓库中。</p>\n<hr>\n<h2 id=\"Git简介\"><a href=\"#Git简介\" class=\"headerlink\" title=\"Git简介\"></a>Git简介</h2><p>Git是一个<strong>分布式</strong>版本控制系统，用于对项目的版本控制，当然也有<strong>集中式</strong>版本控制系统，比如：SVN。最初 Git 的开发是为了辅助 Linux 内核开发的过程，后来慢慢的在很多其他自由软件项目中也使用了 Git。</p>\n<h2 id=\"何为GitHub\"><a href=\"#何为GitHub\" class=\"headerlink\" title=\"何为GitHub\"></a>何为GitHub</h2><p>gitHub是国外的一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。国内的也有托管平台，比如：码云（Gitee）。</p>\n<h2 id=\"Github操作\"><a href=\"#Github操作\" class=\"headerlink\" title=\"Github操作\"></a><strong>Github操作</strong></h2><p>先在GitHub上创建一个项目，目的是用于把本地的项目上传到该远程仓库中，在此引用网上的一张图（看后一目了然）如下图：<br><img src=\"https://img-blog.csdn.net/20180704092925840?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3NzI1MDAz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\"></p>\n<h2 id=\"Git操作\"><a href=\"#Git操作\" class=\"headerlink\" title=\"Git操作\"></a><strong>Git操作</strong></h2><p><strong>第一步</strong><br>打开Git Bash，在命令行中cd进入项目目录中<br><img src=\"https://image.charones.com/usr/uploads/2019/09/562919979.png\"><br>进入后输入命令：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">init</span></span><br></pre></td></tr></table></figure>\n<p>作用：在当前项目的目录中生成本地的git管理（会在当前目录下多了一个.git文件夹）</p>\n<p><strong>第二步</strong><br>输入命令：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"builtin-name\">add</span> .</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.charones.com/usr/uploads/2019/09/181607367.png\"><br>作用：将项目上所有的文件添加到仓库中的意思，如果想添加某个特定的文件，只需把.换成这个特定的文件名即可</p>\n<p><strong>第三步</strong><br>输入命令：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git</span> commit -m <span class=\"string\">&quot;提交更新&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.charones.com/usr/uploads/2019/09/830437848.png\"><br>作用：表示你对这次提交的注释，双引号里面的内容可以根据个人的需要<br>改。</p>\n<p><em><strong>输入完后会出现输入自己的账号或者姓名的提示，如图：</strong></em></p>\n<p><img src=\"https://image.charones.com/usr/uploads/2019/09/3339086964.png\"><br>这时用上面提示的代码输入自己的邮箱或名字。<br>如命令：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"keyword\">add </span><span class=\"keyword\">origin </span>&lt;远程github地址&gt;</span><br></pre></td></tr></table></figure>\n<p>&lt;&gt;中为远程地址，实际输入命令没有&lt;&gt;符号，后面直接跟地址</p>\n<p>输入后再输入git commit -m “提交更新”命令时就会成功。</p>\n<p><strong>第四步</strong><br>输入命令：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">push</span> -u <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://image.charones.com/usr/uploads/2019/09/252055681.png\"><br>作用：将本地项目上传到远程GitHub仓库中<br>这是如果在远程项目中有存在的文件，则需要先将远程仓库中项目下载到本地，再进行提交，也就是先<strong>更新再提交</strong>，不然就会出现如下错误，如图：<br><img src=\"https://image.charones.com/usr/uploads/2019/09/2980647582.png\"><br>这就是版本不一致造成的，这时需要输入以下命令：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull <span class=\"comment\">--rebase origin master</span></span><br></pre></td></tr></table></figure>\n<p>作用：抓取并合并远程仓库到本地</p>\n<p>最后再执行上传命令则就成功将项目上传到GitHub仓库中<br>如图：<br><img src=\"https://image.charones.com/usr/uploads/2019/09/43087761.png\"></p>\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>以上就是利用Git将本地项目上传到GitHub的过程，其实很早就用Git将项目上传到GitHub中了，但对这套流程一直没做过总结与记录，慢慢的有时会遗忘一些命令的使用，于是写下这篇文章作为记录，好记性不如烂笔头，以便日后查看与记忆。</p>\n","categories":["Git"],"tags":["Git"]},{"title":"IDEA下创建maven聚合工程","url":"/archives/66.html","content":"<p><img src=\"https://image.charones.com/usr/uploads/2019/11/710888379.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以往都是使用的eclipse工具来开发项目，虽然IDEA也在使用，但使用它来开发的项目较少，前几天eclipse突然抽风了，导致项目无法进行下去，于是就打算转战IDEA，而后就有了以下这篇文章，记录IDEA下搭建Maven聚合工程。</p>\n<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2><p>本项目是一个分布式商城项目，用到的技术栈有：Spring，SpringMVC，Mybatis，Dubbo，Redis，FastDFS，Zookeeper，Nginx等框架，本篇文章不重点介绍此项目，<strong>主要记录IDEA下创建maven聚合项目的过程</strong>。</p>\n<h2 id=\"工程结构\"><a href=\"#工程结构\" class=\"headerlink\" title=\"工程结构\"></a>工程结构</h2><p>parent为工程的父工程，用来管理jar包的版本号，项目中所有工程都继承该父工程。</p>\n<p><img src=\"https://image.charones.com/usr/uploads/2019/11/1909012967.png\"></p>\n<hr>\n<p><strong>开始之前先创建一个空的工程，作为整个项目的工作空间，存储项目。</strong></p>\n<p><img src=\"https://image.charones.com/usr/uploads/2019/11/3179563415.png\"><br><strong>点击next后会让输入项目名称，输完项目名称后，点击Finish后就创建完成了</strong>。</p>\n<hr>\n<h2 id=\"创建parent工程\"><a href=\"#创建parent工程\" class=\"headerlink\" title=\"创建parent工程\"></a>创建parent工程</h2><p>1、依次点击File ——&gt; New ——&gt; Module..<br><strong>如图所示：</strong><br><img src=\"https://image.charones.com/usr/uploads/2019/11/3229652861.png\"><br>2、点击后会弹出创建工程的窗口，然后依此如图点击。</p>\n<p><img src=\"https://image.charones.com/usr/uploads/2019/11/2154353145.png\"></p>\n<p>3、在此页面填写maven工程信息后，一直点击next直至finish。<br><strong>如图所示：</strong><br><img src=\"https://image.charones.com/usr/uploads/2019/11/3885920751.png\"></p>\n<p>4、此时parent工程创建完毕，打开parent工程的pom.xml文件进行配置信息的修改，当然也可以删除src下的文件，因为在此就只是一个版本控制的pom工程，因此也可以删除src下的文件。<br>如图所示：<br><img src=\"https://image.charones.com/usr/uploads/2019/11/1532921932.png\"><br>在此只用了一个fastjson依赖作为了演示。<br><strong>注意：一定要修改parent工程的打包方式，在此为父工程，并作为版本依赖的控制，所以修改为pom方式。</strong></p>\n<h2 id=\"创建common工程\"><a href=\"#创建common工程\" class=\"headerlink\" title=\"创建common工程\"></a>创建common工程</h2><p>1、和创建parent工程步骤一致，一直到填写maven工程信息才有所不同，在此就不再记录了，直接记录不同之处。<br>2、填写maven信息，如图所示：<br><img src=\"https://image.charones.com/usr/uploads/2019/11/1564926419.png\"><br><strong>注意：最上面有两个选项卡，第一个选择为none，意思为不将此过程加入到parent中（因为只需要单纯的继承，所以不需要添加，聚合工程时才需要），第二个选项卡选择刚创建的parent，意思为此工程将继承parent工程。</strong><br>3、修改完毕后，点击next直至finish。<br>4、common工程创建完毕，修改pom.xml配置信息，如图所示：<br><img src=\"https://image.charones.com/usr/uploads/2019/11/3826692154.png\"><br>common工程创建完毕。</p>\n<h2 id=\"创建manger聚合工程\"><a href=\"#创建manger聚合工程\" class=\"headerlink\" title=\"创建manger聚合工程\"></a>创建manger聚合工程</h2><p>1、和创建common工程步骤一致，都要继承parent工程，最后创建完毕后，把pom.xml文件的打包方式修改为pom。<br>pom文件如图所示：<br><img src=\"https://image.charones.com/usr/uploads/2019/11/2948097408.png\"><br>manger工程创建完毕</p>\n<h2 id=\"创建pojo子工程\"><a href=\"#创建pojo子工程\" class=\"headerlink\" title=\"创建pojo子工程\"></a>创建pojo子工程</h2><p>1、pojo工程为manger聚合工程下的子工程，首先点击选中manger，然后依次点击：鼠标右键——&gt; New ——&gt; Module..<br>如图所示：<br><img src=\"https://image.charones.com/usr/uploads/2019/11/908816368.png\"><br>2、点击后在弹出的创建工程上依此如图所示点击<br><img src=\"https://image.charones.com/usr/uploads/2019/11/292517979.png\"><br>3、点击next后，如图所示配置maven工程信息<br><img src=\"https://image.charones.com/usr/uploads/2019/11/3080248082.png\"><br>4、点击next直至finish<br>5、修改pojo的pom工程文件，如图所示：<br><img src=\"https://image.charones.com/usr/uploads/2019/11/1802667684.png\"><br>6、此时pojo子工程创建完毕，这时再去查看manger聚合工程的pom文件，里面就加入一个刚创建pojo模块<br>如图：<br><img src=\"https://image.charones.com/usr/uploads/2019/11/2810311382.png\"></p>\n<hr>\n<h2 id=\"省略\"><a href=\"#省略\" class=\"headerlink\" title=\"省略\"></a>省略</h2><p><strong>剩余的dao，interface，service都属于manger聚合工程下的子工程，创建方式和pojo一致，不一致的地方就是打包方式，打包方式根据实际工程而定。</strong><br><strong>web工程不属于聚合工程下的子工程，它的创建方式就和common工程一致，但打包方式为war包，根据工程而定，选择maven工程的模板选择为：</strong><br><img src=\"https://image.charones.com/usr/uploads/2019/11/2215964992.png\"><br>选择webapp是因为它可以自动为你创建web.xml等文件。</p>\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>以上就是在IDEA工具下创建maven聚合工程的步骤，之前一直用eclipse来创建，这次eclipse抽风后，就转战IDEA了，也就算是做为一个笔记，方便日后查看。</p>\n","categories":["maven"],"tags":["maven","IDEA"]},{"title":"SSM购物商城项目+后台管理","url":"/archives/64.html","content":"<p><img src=\"https://image.charones.com/usr/uploads/2019/10/1011996262.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本项目是在学习SSM框架后的又一个产物，同时也是博主当年拿来当作毕业设计的项目，之前写的都是后台管理系统，写来写去千篇一律，于是乎就想写个另一种类型的项目，同时也是对自己所学知识的巩固，于是此项目就问世了。</p>\n<h2 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h2><p>此项目是一个买生鲜PC端的<strong>简单的</strong>商城项目，包含<strong>用户端</strong>和<strong>管理平台</strong>，至于为什么说它简单，是因为里面并没有完善的商城项目该有的功能，但基础的功能还是有的，其项目主要目的还是用来巩固自己所学的知识，毕竟光学不练假把式。</p>\n<h2 id=\"模块介绍\"><a href=\"#模块介绍\" class=\"headerlink\" title=\"模块介绍\"></a>模块介绍</h2><p><strong>用户端</strong></p>\n<ul>\n<li>登陆</li>\n<li>注册</li>\n<li>商品列表</li>\n<li>商品分类</li>\n<li>商品详情</li>\n<li>用户中心</li>\n<li>购物车</li>\n<li>我的的订单</li>\n<li>地址管理</li>\n<li>用户下单</li>\n<li>订单管理</li>\n</ul>\n<p><strong>管理平台</strong></p>\n<ul>\n<li>登陆</li>\n<li>类别管理</li>\n<li>商品管理</li>\n<li>订单管理</li>\n<li>会员管理</li>\n<li>地址管理</li>\n<li>系统设置</li>\n<li>权限管理</li>\n</ul>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><p><strong>后端</strong></p>\n<ul>\n<li>Spring</li>\n<li>SpirngMVC</li>\n<li>Mybatis</li>\n<li>Mysql</li>\n<li>Maven</li>\n<li>tomcat</li>\n<li>Log4j2</li>\n</ul>\n<p><strong>前端</strong></p>\n<ul>\n<li>html</li>\n<li>css</li>\n<li>Jquery</li>\n<li>Layui</li>\n<li>Ajax</li>\n</ul>\n<h2 id=\"项目截图\"><a href=\"#项目截图\" class=\"headerlink\" title=\"项目截图\"></a>项目截图</h2><h2 id=\"用户端\"><a href=\"#用户端\" class=\"headerlink\" title=\"用户端\"></a>用户端</h2><p><img src=\"https://image.charones.com/usr/uploads/2020/10/4249965181.png\"></p>\n<p><img src=\"https://image.charones.com/usr/uploads/2020/10/1137716480.png\"></p>\n<p><img src=\"https://image.charones.com/usr/uploads/2020/10/2359438592.png\"></p>\n<p><img src=\"https://image.charones.com/usr/uploads/2020/10/3134085559.png\"></p>\n<h2 id=\"管理端\"><a href=\"#管理端\" class=\"headerlink\" title=\"管理端\"></a>管理端</h2><p><img src=\"https://image.charones.com/usr/uploads/2020/10/2848771081.png\"><br><img src=\"https://image.charones.com/usr/uploads/2020/10/2076109169.png\"></p>\n<p><strong>部署教程(IDEA部署)：</strong></p>\n<p>1、先使用git将项目从Github克隆下来，直接可以使用IDEA直接克隆到本地并打开，如下图：<br><img src=\"https://image.charones.com/2022/Snipaste_2022-01-01_12-16-46.png\"></p>\n<p>2、将项目中的 <strong>Shop.sql</strong>  放到数据库管理工具中执行，注意：本项目是基于<strong>Mysql5.x</strong>开发的，如果是高版本MySQL，需要自行测试，猜测应该是没什么问题的</p>\n<p>3、克隆到本地后，不用再进行任何其余的配置(<strong>开箱即可食用，不用多余配置</strong>)，包括Tomcat。(本项目使用的是基于maven内嵌的Tomcat7，因此不需要再另行配置)</p>\n<p>4、项目打开后，然后等加载maven成功后，可以通过IDEA工具右侧的<strong>maven快捷方式</strong>运行，如下图<br><img src=\"https://image.charones.com/2022/Snipaste_2022-01-01_14-33-34.png\"><br>双击 <strong>tomcat:7run</strong> 即可运行</p>\n<p>PS：如果看不到这个功能，可以刷新一下maven配置，点击左上角的刷新图标，如下图<br><img src=\"https://image.charones.com/2022/Snipaste_2022-01-01_14-37-02.png\"></p>\n<p><strong>运行后浏览器输入如下即可预览：</strong></p>\n<p>前台地址：<code>http://localhost:8888/Shop-SSM/shop-user/</code></p>\n<p>后台地址：<code>http://localhost:8888/Shop-SSM/admin/</code></p>\n<h2 id=\"获取源码\"><a href=\"#获取源码\" class=\"headerlink\" title=\"获取源码\"></a>获取源码</h2><p>地址：<a href=\"https://github.com/Snykta/Shop-SSM\">https://github.com/Snykta/Shop-SSM</a></p>\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>此项目虽然没有完善的功能，但基础的该有的还是有的，页面虽然丑点(这不重要，手动狗头~~)，但功能是逻辑是正常的，对于初学SSM框架还是有或多或少的帮助的，当然也可以在此项目基础上进行完善，二次开发，这都是可以的。</p>\n<blockquote>\n<p>老骥伏枥，志在千里。</p>\n</blockquote>\n","categories":["JavaWeb项目"],"tags":["JavaWeb"]},{"title":"SpringBoot向后台传参的若干种方式","url":"/archives/84.html","content":"<p><img src=\"https://image.charones.com/usr/uploads/2019/11/3476319186.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>说到<strong>传参</strong>肯定大家都不陌生，从事开发的更可以可以说是天天遇到了，这篇文章也就是主要记录以下传参的各种方式，因为经常使用的是SpringBoot来开发，所以就拿SpringBoot来举例，记录前端向后端传参的若干种方式。</p>\n<h2 id=\"普通传参-前端参数与后端形参名称一致\"><a href=\"#普通传参-前端参数与后端形参名称一致\" class=\"headerlink\" title=\"普通传参(前端参数与后端形参名称一致)\"></a>普通传参(前端参数与后端形参名称一致)</h2><p><strong>前端代码：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> param = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$(<span class=\"string\">&#x27;#btn&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span> : <span class=\"string\">&#x27;/WeChart/items.do&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span> : <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span> : param,</span><br><span class=\"line\">        <span class=\"attr\">dataType</span> : <span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">success</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(m)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>后端代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/items&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">charon</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>后台结果：</strong>name=张三</p>\n<h2 id=\"普通传参-前端参数与后端形参名称不一致\"><a href=\"#普通传参-前端参数与后端形参名称不一致\" class=\"headerlink\" title=\"普通传参(前端参数与后端形参名称不一致)\"></a>普通传参(前端参数与后端形参名称不一致)</h2><p><strong>前端代码：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> param = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;dcc&quot;</span> : <span class=\"string\">&quot;李四&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#btn&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span> : <span class=\"string\">&#x27;/WeChart/items2.do&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span> : <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span> : param,</span><br><span class=\"line\">        <span class=\"attr\">dataType</span> : <span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">success</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(m)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>后端代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/items2&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">charon2</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;dcc&quot;)</span> String name)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当前端参数名称和后端不一致时可以使用RequestParam注解，请求参数的参数名,可以作为参数映射名称<br><strong>后台结果：</strong>name=李四</p>\n<h2 id=\"pojo实体类传参\"><a href=\"#pojo实体类传参\" class=\"headerlink\" title=\"pojo实体类传参\"></a>pojo实体类传参</h2><p><strong>前端代码</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var param = &#123;</span><br><span class=\"line\">    &quot;users&quot; : &quot;账户&quot;,</span><br><span class=\"line\">    &quot;password&quot; : &quot;密码&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$(&#x27;#btn&#x27;).click(function () &#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url : &#x27;/WeChart/items3.do&#x27;,</span><br><span class=\"line\">        type : &#x27;post&#x27;,</span><br><span class=\"line\">        data : param,</span><br><span class=\"line\">        dataType : &#x27;json&#x27;,</span><br><span class=\"line\">        success : function (m) &#123;</span><br><span class=\"line\">            console.log(m)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>后端代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/items3&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">charon3</span><span class=\"params\">(Pusers pusers)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(pusers.getUsers());</span><br><span class=\"line\">    logger.info(pusers.getPassword());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>实体类代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pusers</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String users;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"comment\">//省略get/set方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前端参数名称对应实体类中的属性名称，后端形参可以直接用实体类来表示<br><strong>后台结果：</strong>users=账户，password=密码</p>\n<h2 id=\"多参无实体类传参一\"><a href=\"#多参无实体类传参一\" class=\"headerlink\" title=\"多参无实体类传参一\"></a>多参无实体类传参一</h2><p><strong>前端代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> param = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;users&quot;</span> : <span class=\"string\">&quot;账户&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;password&quot;</span> : <span class=\"string\">&quot;密码&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;我的名字&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">param = <span class=\"built_in\">JSON</span>.stringify(param);<span class=\"comment\">//将对象转为json串</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#btn&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span> : <span class=\"string\">&#x27;/WeChart/items4.do&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">contentType</span> : <span class=\"string\">&quot;application/json;charset=UTF-8&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span> : param,</span><br><span class=\"line\">        <span class=\"attr\">type</span> : <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dataType</span> : <span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">success</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(m)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>后端代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/items4&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">charon4</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> String map)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(map);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>后端结果：</strong>{“users”:”账户”,”password”:”密码”,”name”:”我的名字”}</p>\n<h2 id=\"多参无实体类传参二\"><a href=\"#多参无实体类传参二\" class=\"headerlink\" title=\"多参无实体类传参二\"></a>多参无实体类传参二</h2><p><strong>前端代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> param = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;users&quot;</span> : <span class=\"string\">&quot;账户&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;password&quot;</span> : <span class=\"string\">&quot;密码&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span> : <span class=\"string\">&quot;我的名字&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#btn&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span> : <span class=\"string\">&#x27;/WeChart/items5.do&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span> : param,</span><br><span class=\"line\">        <span class=\"attr\">type</span> : <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dataType</span> : <span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">success</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(m)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>后端代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/items5&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">charon5</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(map.toString());</span><br><span class=\"line\">    logger.info((String) map.get(<span class=\"string\">&quot;name&quot;</span>));</span><br><span class=\"line\">    logger.info((String) map.get(<span class=\"string\">&quot;users&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>后端结果：</strong>{users=账户, password=密码, name=我的名字}，我的名字，账户</p>\n<h2 id=\"传递数组\"><a href=\"#传递数组\" class=\"headerlink\" title=\"传递数组\"></a>传递数组</h2><p><strong>前端代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> param = &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;ids&quot;</span> : [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#btn&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span> : <span class=\"string\">&#x27;/WeChart/items6.do&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span> : param,</span><br><span class=\"line\">        <span class=\"attr\">type</span> : <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">dataType</span> : <span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">success</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(m)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>后端代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/items6&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">charon6</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;ids[]&quot;)</span> Integer[] ids)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;数据：&#123;&#125;&quot;</span>, Arrays.asList(ids));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>后端结果：</strong>[1, 2, 3]</p>\n<h2 id=\"传递集合\"><a href=\"#传递集合\" class=\"headerlink\" title=\"传递集合\"></a>传递集合</h2><p><strong>前端代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> param = &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;ids&quot;</span> : [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   $(<span class=\"string\">&#x27;#btn&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       $.ajax(&#123;</span><br><span class=\"line\">           <span class=\"attr\">url</span> : <span class=\"string\">&#x27;/WeChart/items7.do&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">data</span> : param,</span><br><span class=\"line\">           <span class=\"attr\">type</span> : <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">dataType</span> : <span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">success</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(m)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>后端代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/items7&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">charon7</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;ids[]&quot;)</span> List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;数据：&#123;&#125;&quot;</span>, ids.toString());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>后端结果：</strong>[1, 2, 3]</p>\n<h2 id=\"传递复杂性参数\"><a href=\"#传递复杂性参数\" class=\"headerlink\" title=\"传递复杂性参数\"></a>传递复杂性参数</h2><p><strong>前端代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dcc = [];</span><br><span class=\"line\">   <span class=\"keyword\">var</span> lists = [&#123;</span><br><span class=\"line\">       <span class=\"string\">&quot;users&quot;</span> : <span class=\"string\">&quot;张三1&quot;</span>,</span><br><span class=\"line\">       <span class=\"string\">&quot;password&quot;</span> : <span class=\"string\">&quot;密码1&quot;</span></span><br><span class=\"line\">   &#125;,&#123;</span><br><span class=\"line\">       <span class=\"string\">&quot;users&quot;</span> : <span class=\"string\">&quot;张三2&quot;</span>,</span><br><span class=\"line\">       <span class=\"string\">&quot;password&quot;</span> : <span class=\"string\">&quot;密码2&quot;</span></span><br><span class=\"line\">   &#125;];</span><br><span class=\"line\">   <span class=\"keyword\">var</span> user =&#123;</span><br><span class=\"line\">       <span class=\"string\">&quot;username&quot;</span> : <span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   user.lists = lists;<span class=\"comment\">//向对象种添加新属性</span></span><br><span class=\"line\">   dcc.push(user);</span><br><span class=\"line\">   $(<span class=\"string\">&#x27;#btn&#x27;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       $.ajax(&#123;</span><br><span class=\"line\">           <span class=\"attr\">url</span> : <span class=\"string\">&#x27;/WeChart/items9.do&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">data</span> : <span class=\"built_in\">JSON</span>.stringify(dcc),</span><br><span class=\"line\">          <span class=\"attr\">contentType</span> : <span class=\"string\">&quot;application/json&quot;</span>,</span><br><span class=\"line\">           <span class=\"attr\">type</span> : <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">           <span class=\"attr\">success</span> : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.log(m)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>后端代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/items9&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">charon9</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> String maps)</span> </span>&#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;数据：&#123;&#125;&quot;</span>, maps);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>后端结果：</strong>[{“username”:”张三”,”lists”:[{“users”:”张三1”,”password”:”密码1”},{“users”:”张三2”,”password”:”密码2”}]}]</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>@RequestBody注解，必须与contentType 类型application/json配合使用</li>\n<li>@RequestParam注解，必须与contentTyp类型application/x-www-form-urlencoded配合使用，其为默认类型。</li>\n<li>JSON.stringify()把对象类型转换为字符串类型，配合@RequestBody注解和contentType 类型application/json使用。</li>\n</ol>\n<p><em><strong>以上就是Springboot传递参数的几种举例，每个方法都是经过博主实际测试通过的，在此分享同时也算是做个记录。</strong></em></p>\n","categories":["SpringBoot"],"tags":["SpringBoot"]},{"title":"Docker安装Mysql并挂载目录后运行","url":"/archives/104.html","content":"<p><img src=\"https://image.charones.com/usr/uploads/2020/10/3405473456.png\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>记一次MySql数据库读写分离的的功能，其中里面涉及到了数据库的主从复制，并且是在Docker中的运行的MySql实例，于是乎就写下这篇文章，记录在Docker中安装MySql的步骤。</p>\n<h2 id=\"一、拉取镜像\"><a href=\"#一、拉取镜像\" class=\"headerlink\" title=\"一、拉取镜像\"></a>一、拉取镜像</h2><p>1、执行如下命令拉取镜像：<br>本次使用的版本号是8.0.18</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull mysql:8.0.18</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong>记得配置镜像加速器，否则拉取镜像将非常慢，原因你懂的。</p>\n<p>2、查看镜像是否存在：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、配置并运行容器\"><a href=\"#二、配置并运行容器\" class=\"headerlink\" title=\"二、配置并运行容器\"></a>二、配置并运行容器</h2><p>1、运行容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3308:3306 --name mysql-server-01 -e MYSQL_ROOT_PASSWORD=&quot;123456&quot; mysql:8.0.18</span><br></pre></td></tr></table></figure>\n<p>2、查看是否运行成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n<p>如图所示则成功：<br><img src=\"https://image.charones.com/usr/uploads/2020/10/2194755708.png\"></p>\n<p>3、进入容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker exec -it mysql-server-01 bash</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong>mysql-server-01就是运行时设置的容器名称</p>\n<p>4、查看容器内mysql配置文件路径</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql --help | grep my.cnf</span><br></pre></td></tr></table></figure>\n<p>如图：<img src=\"https://image.charones.com/usr/uploads/2020/10/1746848017.png\"></p>\n<p>5、复制配置文件到宿主机目录<br>找到容器路径后，退出容器(ctrl+d)，在<strong>宿主机</strong>下执行如下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker cp mysql-server-01:/etc/mysql/my.cnf /mydocker/mysql-server-docker/mysql-01/conf</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong>宿主机路径位置一定要创建好</p>\n<p>6、重新运行容器<br>配置好配置文件后，重新运行容器，将容器的配置文件指向宿主机的配置文件<br>执行如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --restart=always --privileged=true -d -v /mydocker/mysql-server-docker/mysql-01/data/:/var/lib/mysql -v /mydocker/mysql-server-docker/mysql-01/conf/my.cnf:/etc/mysql/my.cnf -p 3308:3306 --name mysql-server-01 -e MYSQL_ROOT_PASSWORD=&quot;123456&quot; mysql:8.0.18</span><br></pre></td></tr></table></figure>\n<p><strong>提示：</strong>运行新容器时记得删除就容器，或者不删除，但容器名字不能相同，端口号不能被占用！！</p>\n<h2 id=\"三、测试连接\"><a href=\"#三、测试连接\" class=\"headerlink\" title=\"三、测试连接\"></a>三、测试连接</h2><p>1、进行容器，开启远程访问<br>执行如下命令连接mysql：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p123456</span><br></pre></td></tr></table></figure>\n\n<p>2、进入名字为mysql的库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">use mysql</span><br></pre></td></tr></table></figure>\n<p>3、配置远程访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE user SET `Host` = &#x27;%&#x27; WHERE `User` = &#x27;root&#x27; LIMIT 1;</span><br></pre></td></tr></table></figure>\n<p>4、刷新生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n<p>5、连接成功<br><img src=\"https://image.charones.com/usr/uploads/2020/10/3462937496.png\"></p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>以上就是在Docker中安装MySql的步骤，可以配置集群，主从复制等，如果测试连接不上，可以检查以下：端口是否开放，端口是否被占用，映射是否成功，容器是否运行，安全组或者防火墙是否打开等这几处来检测。</p>\n","categories":["Docker","MySql"],"tags":["Docker","MySql"]},{"title":"Redisson实现订单超时自动关闭(高可用)","url":"/archives/86.html","content":"<p><img src=\"https://image.charones.com/usr/uploads/2020/04/545024470.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>艺术来源于生活，技术来源于业务，由于原业务上的需求，需要做一个用户下单后超过一定时间内没有支付自动取消订单，说白了就是一个超时自动取消的功能，这种场景恐怕是非常非常常见的一个业务需求了，在此记录下使用redis来实现此功能。</p>\n<h2 id=\"业务分析\"><a href=\"#业务分析\" class=\"headerlink\" title=\"业务分析\"></a>业务分析</h2><p>当产品经理说到超时取消时，第一时间想到的就是延迟队列，市面上也有很多常见的消息中间件，例如：RabbitMQ，RocketMQ，ActiveMQ，Kafka，Redis，ZeroMQ等等，都可以实现此功能，虽然轮子不断造，但合适自己的才是最好的。</p>\n<h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><p>1、RabbitMQ：一开始选中的就是它，它有一个实现延迟队列的插件，正好符合要求，但后来和技术经理沟通下，由于自身服务架构来说，此方法最终被石沉大海了，此方案被pass掉。</p>\n<p>2、Redis：第二个方案是基于Redis，使用Redis的key过期通知，在服务端捕获这个失效通知来处理业务，一开始是可行的，但后来考虑到高可用，而且当接收通知的服务宕机时，就会出现掉单，丢失消息的情况，于是此方法也被Pass掉。</p>\n<p>3、Redis+Redisson：经过几次考虑与测试后，最终使用了此技术来实现超时订单取消的功能开发。</p>\n<h2 id=\"技术介绍\"><a href=\"#技术介绍\" class=\"headerlink\" title=\"技术介绍\"></a>技术介绍</h2><blockquote>\n<p>Redisson：Redisson在基于NIO的Netty框架上，充分的利用了Redis键值数据库提供的一系列优势，在Java实用工具包中常用接口的基础上，为使用者提供了一系列具有分布式特性的常用工具类。使得原本作为协调单机多线程并发程序的工具包获得了协调分布式多机多线程并发系统的能力，大大降低了设计和研发大规模分布式系统的难度。同时结合各富特色的分布式服务，更进一步简化了分布式环境中程序相互之间的协作。</p>\n</blockquote>\n<p>中文文档：<a href=\"https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95\">https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95</a></p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p><strong>pom.xml依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.redisson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>redisson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.12.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Redisson的配置类：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisQueueConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 连接redis的地址</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String host;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//redis的端口号</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;spring.redis.port&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String port;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//redis的密码</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;spring.redis.password&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedissonClient <span class=\"title\">redissonClient</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//此处为单机配置，高可用配置请往下看</span></span><br><span class=\"line\">        Config config = <span class=\"keyword\">new</span> Config();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (password.equals(<span class=\"string\">&quot;&quot;</span>))&#123;</span><br><span class=\"line\">            config.setCodec(<span class=\"keyword\">new</span> org.redisson.client.codec.StringCodec());</span><br><span class=\"line\">            config.useSingleServer().setAddress(<span class=\"string\">&quot;redis://&quot;</span> + host + <span class=\"string\">&quot;:&quot;</span> + port).setDatabase(<span class=\"number\">2</span>).setTimeout(<span class=\"number\">5000</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            config.useSingleServer().setAddress(<span class=\"string\">&quot;redis://&quot;</span> + host + <span class=\"string\">&quot;:&quot;</span> + port).setPassword(password).setDatabase(<span class=\"number\">2</span>).setTimeout(<span class=\"number\">5000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Redisson.create(config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>伪下单代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RedissonClient redissonClient;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestController</span><span class=\"params\">(RedissonClient redissonClient)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.redissonClient = redissonClient;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 目标队列</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        RBlockingQueue&lt;String&gt; blockingRedPacketQueue</span><br><span class=\"line\">                = redissonClient.getBlockingQueue(<span class=\"string\">&quot;userOrderKey&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 定时任务将到期的元素转移到目标队列</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        RDelayedQueue&lt;String&gt; delayedRedPacketQueue</span><br><span class=\"line\">                = redissonClient.getDelayedQueue(blockingRedPacketQueue);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 123456代表订单号，放入队列中</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置10秒后到期</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        delayedRedPacketQueue.offer(<span class=\"string\">&quot;123456&quot;</span>, <span class=\"number\">10</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;OK&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>处理超时订单代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutoStart</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(AutoStart.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedissonClient redissonClient;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        RBlockingQueue&lt;String&gt; blockingRedPacketQueue</span><br><span class=\"line\">                = redissonClient.getBlockingQueue(<span class=\"string\">&quot;userOrderKey&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        RDelayedQueue&lt;String&gt; delayedRedPacketQueue</span><br><span class=\"line\">                = redissonClient.getDelayedQueue(blockingRedPacketQueue);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 如果当前没有失效的订单，则此循环会暂时阻塞</span></span><br><span class=\"line\"><span class=\"comment\">             * 取出超时订单信息</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            String redPacket = blockingRedPacketQueue.take();</span><br><span class=\"line\">            LOGGER.info(<span class=\"string\">&quot;订单号:&#123;&#125;过期失效&quot;</span>,redPacket);</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 处理相关业务逻辑</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高可用配置\"><a href=\"#高可用配置\" class=\"headerlink\" title=\"高可用配置\"></a>高可用配置</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 主从部署方式</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Config config = <span class=\"keyword\">new</span> Config();</span><br><span class=\"line\">config.useMasterSlaveServers()</span><br><span class=\"line\">        <span class=\"comment\">//设置redis主节点</span></span><br><span class=\"line\">        .setMasterAddress(<span class=\"string\">&quot;redis://127.0.0.1:6379&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">//设置redis从节点</span></span><br><span class=\"line\">        .addSlaveAddress(<span class=\"string\">&quot;redis://127.0.0.2:6379&quot;</span>, <span class=\"string\">&quot;redis://127.0.0.3:6379&quot;</span>);</span><br><span class=\"line\">RedissonClient redisson = Redisson.create(config);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 集群部署方式</span></span><br><span class=\"line\"><span class=\"comment\"> * cluster方式至少6个节点</span></span><br><span class=\"line\"><span class=\"comment\"> * 3主3从，3主做sharding，3从用来保证主宕机后可以高可用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Config config = <span class=\"keyword\">new</span> Config();</span><br><span class=\"line\">config.useClusterServers()</span><br><span class=\"line\">        .setScanInterval(<span class=\"number\">2000</span>)<span class=\"comment\">//集群状态扫描间隔时间，单位是毫秒</span></span><br><span class=\"line\">        .addNodeAddress(<span class=\"string\">&quot;redis://127.0.0.1:6379&quot;</span>)</span><br><span class=\"line\">        .addNodeAddress(<span class=\"string\">&quot;redis://127.0.0.2:6379&quot;</span>)</span><br><span class=\"line\">        .addNodeAddress(<span class=\"string\">&quot;redis://127.0.0.3:6379&quot;</span>)</span><br><span class=\"line\">        .addNodeAddress(<span class=\"string\">&quot;redis://127.0.0.4:6379&quot;</span>)</span><br><span class=\"line\">        .addNodeAddress(<span class=\"string\">&quot;redis://127.0.0.5:6379&quot;</span>)</span><br><span class=\"line\">        .addNodeAddress(<span class=\"string\">&quot;redis://127.0.0.6:6379&quot;</span>);</span><br><span class=\"line\">RedissonClient redissonClient = Redisson.create(config);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 哨兵部署方式</span></span><br><span class=\"line\"><span class=\"comment\"> * sentinel是采用 Paxos拜占庭协议，一般sentinel至少3个节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Config config = <span class=\"keyword\">new</span> Config();</span><br><span class=\"line\">config.useSentinelServers()</span><br><span class=\"line\">        .setMasterName(<span class=\"string\">&quot;my-sentinel-name&quot;</span>)</span><br><span class=\"line\">        .addSentinelAddress(<span class=\"string\">&quot;redis://127.0.0.1:6379&quot;</span>)</span><br><span class=\"line\">        .addSentinelAddress(<span class=\"string\">&quot;redis://127.0.0.2:6379&quot;</span>)</span><br><span class=\"line\">        .addSentinelAddress(<span class=\"string\">&quot;redis://127.0.0.3:6379&quot;</span>);</span><br><span class=\"line\">RedissonClient redisson = Redisson.create(config);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行截图\"><a href=\"#运行截图\" class=\"headerlink\" title=\"运行截图\"></a>运行截图</h2><p>访问hello接口后，等待10秒，控制台返回如下</p>\n<p><img src=\"https://image.charones.com/usr/uploads/2020/10/4118908773.png\"></p>\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>还是那句话，技术类型越来越多，轮子不停造，选对技术合适自己业务的才是最好的，无论是JDK内置的延迟队列还是基于时间轮算法的队列，都无法保证生产系统的高可用性，而Redisson很好的解决了这个问题。</p>\n","categories":["Redisson"],"tags":["SpringBoot","Redis","Redisson"]},{"title":"MySql数据库实现主从复制","url":"/archives/101.html","content":"<p><img src=\"https://image.charones.com/usr/uploads/2020/10/2151511063.png\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><blockquote>\n<p>数据库的主从复制又可称为主从同步，指一台服务器充当主数据库服务器，另一台或多台服务器充当从数据库服务器，主服务器中的数据自动复制到从服务器之中。对于多级复制，数据库服务器即可充当主机，也可充当从机。MySQL主从复制的基础是主服务器对数据库修改记录二进制日志，从服务器通过主服务器的二进制日志自动执行更新。一句话表示就是，主数据库做什么，从数据库就跟着做什么。</p>\n</blockquote>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p>1.Master 数据库只要发生变化，立马记录到Binary log 日志文件中<br>2.Slave数据库启动一个I/O thread连接Master数据库，请求Master变化的二进制日志<br>3.Slave I/O获取到的二进制日志，保存到自己的Relay log 日志文件中。<br>4.Slave 有一个 SQL thread定时检查Realy log是否变化，变化那么就更新数据<br><img src=\"https://image.charones.com/usr/uploads/2020/10/1832236725.png\"></p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><ul>\n<li>实现服务器负载均衡</li>\n<li>通过复制实现数据的异地备份</li>\n<li>提高数据库系统的可用性</li>\n<li>实现业务上的读写分离</li>\n</ul>\n<hr>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>本地安装两个mysql，或者使用虚拟机，或者使用docker安装，需要准备两个mysql，本文使用的是docker方式安装。<br>具体安装方法：<a href=\"https://charones.com/archives/104.html\">https://charones.com/archives/104.html</a></p>\n<blockquote>\n<p>宿主机 centos7 mysql:8.0.21<br>mysql1(master): 172.17.0.3:3308<br>mysql2(slave): 172.17.0.2:3309</p>\n</blockquote>\n<h2 id=\"主数据库配置\"><a href=\"#主数据库配置\" class=\"headerlink\" title=\"主数据库配置\"></a>主数据库配置</h2>","categories":["Docker","MySql","服务搭建"],"tags":["Docker","MySql"]},{"title":"Python+OpenCV实现对指针式仪表的识别","url":"/archives/91.html","content":"<p><img src=\"https://image.charones.com/usr/uploads/2020/10/3493261755.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文是使用Python语言基于OpenCV对图像进行二次处理，使其进行识别辨认的一个 <em><strong>不成熟</strong></em>  的案例代码相关博文。</p>\n<p>至于为什么说不成熟呢，因为Python并不是博主 <em>‘母语言’</em> 这个代码案例来源于一次和物联网相关的一次工作经历中产生的，代码参考了网上的一些例子，并以自己的实际业务也进行了二次开发和优化，在此向那些分享代码的好心人表示感谢 😜。 </p>\n<p><strong>代码如下：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.cluster <span class=\"keyword\">import</span> KMeans</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.utils <span class=\"keyword\">import</span> shuffle</span><br><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> cos, pi, sin</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">method = cv2.TM_CCOEFF</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># 模路径</span></span><br><span class=\"line\">TEMPLATE_FILE = os.path.dirname(os.path.dirname(__file__)) + <span class=\"string\">&quot;/static/likeImg/pointer/&quot;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">可以设置矩形框</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_match_rect</span>(<span class=\"params\">template, img, method</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;获取模板匹配的矩形的左上角和右下角的坐标,&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    w, h = template.shape[<span class=\"number\">1</span>], template.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    res = cv2.matchTemplate(img, template, method)</span><br><span class=\"line\">    mn_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)</span><br><span class=\"line\">    <span class=\"comment\"># 使用不同的方法，对结果的解释不同</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> method <span class=\"keyword\">in</span> [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]:</span><br><span class=\"line\">        top_left = min_loc</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        top_left = max_loc</span><br><span class=\"line\">    bottom_right = (top_left[<span class=\"number\">0</span>] + w, top_left[<span class=\"number\">1</span>] + h)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> top_left, bottom_right</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_center_point</span>(<span class=\"params\">top_left, bottom_right</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;传入左上角和右下角坐标，获取中心点&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    c_x, c_y = ((np.array(top_left) + np.array(bottom_right)) / <span class=\"number\">2</span>).astype(np.<span class=\"built_in\">int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c_x, c_y</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_circle_field_color</span>(<span class=\"params\">img, center, r, thickness</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;获取中心圆形区域的色值集&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    temp = img.copy().astype(np.<span class=\"built_in\">int</span>)</span><br><span class=\"line\">    cv2.circle(temp, center, r, -<span class=\"number\">100</span>, thickness=thickness)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> img[temp == -<span class=\"number\">100</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">v2_by_center_circle</span>(<span class=\"params\">img, colors</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;二值化通过中心圆的颜色集合&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(img.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(img.shape[<span class=\"number\">1</span>]):</span><br><span class=\"line\">            a = img[i, j]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> a <span class=\"keyword\">in</span> colors:</span><br><span class=\"line\">                img[i, j] = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                img[i, j] = <span class=\"number\">255</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">v2_by_k_means</span>(<span class=\"params\">img</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;使用k-means二值化&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    original_img = np.array(img, dtype=np.float64)</span><br><span class=\"line\">    src = original_img.copy()</span><br><span class=\"line\">    delta_y = <span class=\"built_in\">int</span>(original_img.shape[<span class=\"number\">0</span>] * (<span class=\"number\">0.4</span>))</span><br><span class=\"line\">    delta_x = <span class=\"built_in\">int</span>(original_img.shape[<span class=\"number\">1</span>] * (<span class=\"number\">0.4</span>))</span><br><span class=\"line\">    original_img = original_img[delta_y:-delta_y, delta_x:-delta_x]</span><br><span class=\"line\">    h, w, d = src.shape</span><br><span class=\"line\">    dts = <span class=\"built_in\">min</span>([w, h])</span><br><span class=\"line\">    r2 = (dts / <span class=\"number\">2</span>) ** <span class=\"number\">2</span></span><br><span class=\"line\">    c_x, c_y = w / <span class=\"number\">2</span>, h / <span class=\"number\">2</span></span><br><span class=\"line\">    a: np.ndarray = original_img[:, :, <span class=\"number\">0</span>:<span class=\"number\">3</span>].astype(np.uint8)</span><br><span class=\"line\">    <span class=\"comment\"># 获取尺寸(宽度、长度、深度)</span></span><br><span class=\"line\">    height, width = original_img.shape[<span class=\"number\">0</span>], original_img.shape[<span class=\"number\">1</span>]</span><br><span class=\"line\">    depth = <span class=\"number\">3</span></span><br><span class=\"line\">    image_flattened = np.reshape(original_img, (width * height, depth))</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    用K-Means算法在颜色样本中建立2个类。</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    image_array_sample = shuffle(image_flattened, random_state=<span class=\"number\">0</span>)</span><br><span class=\"line\">    estimator = KMeans(n_clusters=<span class=\"number\">2</span>, random_state=<span class=\"number\">0</span>)</span><br><span class=\"line\">    estimator.fit(image_array_sample)</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    我们为原始图片的每个像素进行类的分配。</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    src_shape = src.shape</span><br><span class=\"line\">    new_img_flattened = np.reshape(src, (src_shape[<span class=\"number\">0</span>] * src_shape[<span class=\"number\">1</span>], depth))</span><br><span class=\"line\">    cluster_assignments = estimator.predict(new_img_flattened)</span><br><span class=\"line\">    compressed_palette = estimator.cluster_centers_</span><br><span class=\"line\">    a = np.apply_along_axis(func1d=<span class=\"keyword\">lambda</span> x: np.uint8(compressed_palette[x]), arr=cluster_assignments, axis=<span class=\"number\">0</span>)</span><br><span class=\"line\">    img = a.reshape(src_shape[<span class=\"number\">0</span>], src_shape[<span class=\"number\">1</span>], depth)</span><br><span class=\"line\">    threshold = (compressed_palette[<span class=\"number\">0</span>, <span class=\"number\">0</span>] + compressed_palette[<span class=\"number\">1</span>, <span class=\"number\">0</span>]) / <span class=\"number\">2</span></span><br><span class=\"line\">    img[img[:, :, <span class=\"number\">0</span>] &gt; threshold] = <span class=\"number\">255</span></span><br><span class=\"line\">    img[img[:, :, <span class=\"number\">0</span>] &lt; threshold] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(w):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(h):</span><br><span class=\"line\">            distance = ((x - c_x) ** <span class=\"number\">2</span> + (y - c_y) ** <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> distance &gt; r2:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">                img[y, x] = (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> img</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">设置指针位置</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_pointer_rad</span>(<span class=\"params\">img</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;获取角度&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    shape = img.shape</span><br><span class=\"line\">    <span class=\"comment\"># c_y, c_x, depth = int(shape[0] / 2), int(shape[1] / 2), shape[2]</span></span><br><span class=\"line\">    c_y, c_x, depth = <span class=\"number\">498</span>, <span class=\"number\">490</span>, shape[<span class=\"number\">2</span>]</span><br><span class=\"line\">    x1 = c_x + c_x * <span class=\"number\">0.8</span></span><br><span class=\"line\">    src = img.copy()</span><br><span class=\"line\">    freq_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">361</span>):</span><br><span class=\"line\">        x = (x1 - c_x) * cos(i * pi / <span class=\"number\">180</span>) + c_x</span><br><span class=\"line\">        y = (x1 - c_x) * sin(i * pi / <span class=\"number\">180</span>) + c_y</span><br><span class=\"line\">        temp = src.copy()</span><br><span class=\"line\">        cv2.line(temp, (c_x, c_y), (<span class=\"built_in\">int</span>(x), <span class=\"built_in\">int</span>(y)), (<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>), thickness=<span class=\"number\">3</span>)</span><br><span class=\"line\">        t1 = img.copy()</span><br><span class=\"line\">        t1[temp[:, :, <span class=\"number\">2</span>] == <span class=\"number\">255</span>] = <span class=\"number\">255</span></span><br><span class=\"line\">        c = img[temp[:, :, <span class=\"number\">2</span>] == <span class=\"number\">255</span>]</span><br><span class=\"line\">        points = c[c == <span class=\"number\">0</span>]</span><br><span class=\"line\">        freq_list.append((<span class=\"built_in\">len</span>(points), i))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(freq_list, key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">POINTER</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, path</span>):</span>  <span class=\"comment\"># 构造函数不带参数</span></span><br><span class=\"line\">        self.path = path</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_get_val</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 获取测试图像</span></span><br><span class=\"line\">        img_s = cv2.imread(self.path)</span><br><span class=\"line\">        img = cv2.cvtColor(img_s, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\">        template = cv2.imread(TEMPLATE_FILE + <span class=\"string\">&#x27;template.jpg&#x27;</span>)  <span class=\"comment\"># 模板</span></span><br><span class=\"line\">        template = cv2.cvtColor(template, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\">        <span class=\"comment\"># 匹配并返回矩形坐标</span></span><br><span class=\"line\">        top_left, bottom_right = get_match_rect(template, img, method)</span><br><span class=\"line\">        cv2.rectangle(img_s, top_left, bottom_right, <span class=\"number\">255</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"comment\">#################################################################</span></span><br><span class=\"line\">        new = img_s[top_left[<span class=\"number\">1</span>]:bottom_right[<span class=\"number\">1</span>] + <span class=\"number\">1</span>, top_left[<span class=\"number\">0</span>]:bottom_right[<span class=\"number\">0</span>] + <span class=\"number\">1</span>]</span><br><span class=\"line\">        template = cv2.imread(TEMPLATE_FILE + <span class=\"string\">&#x27;template.jpg&#x27;</span>)  <span class=\"comment\"># 模板</span></span><br><span class=\"line\">        top_left, bottom_right = get_match_rect(template, new, method=method)</span><br><span class=\"line\">        new_ = new[top_left[<span class=\"number\">1</span>]:bottom_right[<span class=\"number\">1</span>] + <span class=\"number\">1</span>, top_left[<span class=\"number\">0</span>]:bottom_right[<span class=\"number\">0</span>] + <span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 二值化图像</span></span><br><span class=\"line\">        img = v2_by_k_means(new_)</span><br><span class=\"line\">        rad = get_pointer_rad(img)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(rad)</span><br><span class=\"line\">        <span class=\"comment\">#################################################################</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> rad[<span class=\"number\">1</span>] &lt;= <span class=\"number\">180</span>:</span><br><span class=\"line\">            val = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            val = ((rad[<span class=\"number\">1</span>] - <span class=\"number\">180</span>) * <span class=\"number\">1.72</span>) + <span class=\"number\">1</span>  <span class=\"comment\"># 计算刻度值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> val &lt; <span class=\"number\">100</span>:</span><br><span class=\"line\">                val = val + <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">round</span>(val)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    val = POINTER(<span class=\"string\">&quot;图片路径&quot;</span>).start_get_val()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;刻度值1：&quot;</span> + val)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;刻度值2：&quot;</span> + <span class=\"built_in\">round</span>(val))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>案例中使用的表盘图片：</p>\n<p><img src=\"https://image.charones.com/2022/202201021422150.jpg\"></p>\n<h2 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h2><p>经过多次不用的仪表盘识别，得出的正确结果已经达到85%的准确率，当然这个结果在真正生产环境还是不行的。这个不过只是一个简单的Python+OpenCV进行图像识别的一个案例，代码还是存在要再进行二次优化的空间的。</p>\n<h2 id=\"结言：\"><a href=\"#结言：\" class=\"headerlink\" title=\"结言：\"></a>结言：</h2><p>分享是一种精神，分享也是使其技术进步的一种方式，以上就是Python+OpenCV进行图像识别的一个案例，如果有心的同学，也可以在我这个基础上进行再深一层的优化，参与开源，热衷技术，提升自己 😄 。</p>\n","categories":["Python","OpenCV"],"tags":["Python","OpenCV"]},{"title":"JDK8新特性之Stream流的常用方法","url":"/archives/22032708.html","content":"<p><img src=\"https://image.charones.com/2022/03/202203282055047.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>众所周知，在Jdk1.8中包含了很多的新特性，例如： <strong>Lambda表达式</strong> 、<strong>接口的默认方法和静态方法</strong>、<strong>方法引用</strong>、<strong>Optional</strong>、<strong>Stream</strong>等很多的新特性或者语法糖，而今天这篇文章着重讲解一下  <strong>Stream</strong>  流相关的常用方法。</p>\n<h2 id=\"何为Stream流\"><a href=\"#何为Stream流\" class=\"headerlink\" title=\"何为Stream流\"></a>何为Stream流</h2><ul>\n<li>Java 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据。</li>\n<li>Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。</li>\n<li>Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</li>\n<li>这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。</li>\n<li>元素流在管道中经过中间操作（intermediate operation）的处理，最后由最终操作(terminal operation)得到前面处理的结果。</li>\n</ul>\n<h2 id=\"案例集锦\"><a href=\"#案例集锦\" class=\"headerlink\" title=\"案例集锦\"></a>案例集锦</h2><p><em>注意</em>一：<strong>首先我们先预先定义一个实体类，Student类，里面有姓名、年龄等若干个属性，而下面的所有案例全都基于此实体类做讲解！</strong></p>\n<p><em>注意二</em>：<strong>根据这个实体类，我们new出三个学生对象，并设置各自的属性，然后添加到了<code>studentList</code> 集合中，以下所有案例，全部基于此集合讲解！</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"comment\">// 年龄</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"comment\">// 性别 1-男 0-女</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Short sex;</span><br><span class=\"line\">    <span class=\"comment\">// 体重 单位-g</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BigDecimal weight;</span><br><span class=\"line\">    <span class=\"comment\">// 爱好</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; likeList;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ....忽略get/set，自己测试请记得添加</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 学生对象集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;Student&gt; studentList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 往集合添加数据</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        Student student1 = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">        student1.setName(<span class=\"string\">&quot;小明&quot;</span>);</span><br><span class=\"line\">        student1.setAge(<span class=\"number\">15</span>);</span><br><span class=\"line\">        student1.setSex(Short.parseShort(<span class=\"string\">&quot;1&quot;</span>));</span><br><span class=\"line\">        student1.setWeight(<span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">&quot;60&quot;</span>));</span><br><span class=\"line\">       \tstudent1.setLikeList(Arrays.asList(<span class=\"string\">&quot;羽毛球&quot;</span>,<span class=\"string\">&quot;篮球&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        Student student2 = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">        student2.setName(<span class=\"string\">&quot;小明&quot;</span>);</span><br><span class=\"line\">        student2.setAge(<span class=\"number\">18</span>);</span><br><span class=\"line\">        student2.setSex(Short.parseShort(<span class=\"string\">&quot;1&quot;</span>));</span><br><span class=\"line\">        student2.setWeight(<span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">&quot;65&quot;</span>));</span><br><span class=\"line\">        student2.setLikeList(Arrays.asList(<span class=\"string\">&quot;排球&quot;</span>,<span class=\"string\">&quot;足球&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        Student student3 = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">        student3.setName(<span class=\"string\">&quot;小红&quot;</span>);</span><br><span class=\"line\">        student3.setAge(<span class=\"number\">10</span>);</span><br><span class=\"line\">        student3.setSex(Short.parseShort(<span class=\"string\">&quot;0&quot;</span>));</span><br><span class=\"line\">        student3.setWeight(<span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">&quot;55&quot;</span>));</span><br><span class=\"line\">        student3.setLikeList(Arrays.asList(<span class=\"string\">&quot;足球&quot;</span>,<span class=\"string\">&quot;乒乓球&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        studentList.add(student1);</span><br><span class=\"line\">        studentList.add(student2);</span><br><span class=\"line\">        studentList.add(student3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>1、只单取出姓名属性并去重返回结果</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; nameList = studentList.stream().map(Student::getName).distinct().collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(nameList);</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、取出年龄最大的学生</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Student student = studentList.stream().max(Comparator.comparing(Student::getAge)).orElse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">System.out.println(student);</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、计算出性别为男(sex == 1)的学生总数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> count = studentList.stream().filter(e -&gt; e.getSex().equals(Short.parseShort(<span class=\"string\">&quot;1&quot;</span>))).count();</span><br><span class=\"line\">System.out.println(count);</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、分别计算体重和年龄的总和</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 体重总和</span></span><br><span class=\"line\">BigDecimal weightSum = studentList.stream().map(Student::getWeight).reduce(BigDecimal.ZERO, BigDecimal::add);</span><br><span class=\"line\"><span class=\"comment\">// 年龄总和</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ageSum = studentList.stream().mapToInt(Student::getAge).sum();</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、根据年龄正序从小到大排序，如果年龄属性为null，则排末尾</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Student&gt; collect = studentList.stream().sorted(Comparator.comparing(Student::getAge, Comparator.nullsLast(Integer::compareTo))).collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(collect);</span><br></pre></td></tr></table></figure>\n\n<p><strong>6、根据姓名分组，并计算每个姓名下的体重和年龄总和</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每组体重总和</span></span><br><span class=\"line\">Map&lt;String, BigDecimal&gt; groupObj1 = studentList.stream().collect(Collectors.groupingBy(Student::getName, Collectors.mapping(Student::getWeight, Collectors.reducing(BigDecimal.ZERO, BigDecimal::add))));</span><br><span class=\"line\"><span class=\"comment\">// 每组年龄总和</span></span><br><span class=\"line\">Map&lt;String, Integer&gt; groupObj2 = studentList.stream().collect(Collectors.groupingBy(Student::getName, Collectors.mapping(Student::getAge,Collectors.reducing(<span class=\"number\">0</span>, Integer::sum))));</span><br></pre></td></tr></table></figure>\n\n<p><strong>7、根据多个条件进行分组</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Map&lt;List&lt;Object&gt;, List&lt;Student&gt;&gt; groupObj = studentList.stream().collect(Collectors.groupingBy(e -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.asList(e.getName(), e.getAge());</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"><span class=\"comment\">// PS: 也可也使用拼接写法，不用list接收</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>8、将集合中的姓名属性为维度进行去重并返回新集合</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Student&gt; collect = studentList.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt; <span class=\"keyword\">new</span> TreeSet&lt;&gt;(Comparator.comparing(Student::getName))), ArrayList::<span class=\"keyword\">new</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong>9、将集合中年龄当作key，姓名当作value重新组装返回Map类型</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, String&gt; collect = studentList.stream().collect(Collectors.toMap(Student::getAge, Student::getName));</span><br></pre></td></tr></table></figure>\n\n<p><strong>10、根据姓名分组，且取出每组中体重最重的那位学生</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Student&gt; groupMax = studentList.stream().collect(Collectors.toMap(Student::getName,</span><br><span class=\"line\">        Function.identity(), (c1, c2) -&gt; c1.getWeight().compareTo(c2.getWeight()) &gt; <span class=\"number\">0</span> ? c1 : c2));</span><br><span class=\"line\">System.out.println(groupMax);</span><br></pre></td></tr></table></figure>\n\n<p><strong>11、将学生集合(studentList)中的爱好likeList集合属性的提取成一个单独list并去重</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; likeList = studentList.stream().flatMap(x -&gt; x.getLikeList().stream()).distinct().collect(Collectors.toList());</span><br><span class=\"line\">System.out.println(likeList);</span><br></pre></td></tr></table></figure>\n\n<p><strong>12、根据姓名分组求分组体重之和，然后再根据value倒叙排序map</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Map&lt;String, BigDecimal&gt; groupObj = studentList.stream().collect(Collectors.groupingBy(Student::getName, Collectors.mapping(Student::getWeight, Collectors.reducing(BigDecimal.ZERO, BigDecimal::add))));</span><br><span class=\"line\"><span class=\"comment\">// 排序前值</span></span><br><span class=\"line\">System.out.println(groupObj);</span><br><span class=\"line\"><span class=\"comment\">// 开始排序</span></span><br><span class=\"line\">Map&lt;String, BigDecimal&gt; result = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">Comparator&lt;Map.Entry&lt;String, BigDecimal&gt;&gt; entryComparator = Map.Entry.comparingByValue();</span><br><span class=\"line\">entryComparator = entryComparator.reversed();</span><br><span class=\"line\">groupObj.entrySet().stream().sorted(entryComparator.reversed()).forEachOrdered(e -&gt; result.put(e.getKey(), e.getValue()));</span><br><span class=\"line\"><span class=\"comment\">// 根据value排序后的值</span></span><br><span class=\"line\">System.out.println(result);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"讲在末尾\"><a href=\"#讲在末尾\" class=\"headerlink\" title=\"讲在末尾\"></a>讲在末尾</h2><p>以上就是Jdk1.8中新特性之 <strong>Stream</strong> 流的以下常用方法，Stream流在实际开发业务中其实用的场景非常之多，好记性不如烂笔头，因此写下这篇博文，以防止遗忘，或许对我对你对他都有帮助。</p>\n","categories":["Java"],"tags":["Java"]},{"title":"Logback+Fluentbit+Openobserve实现日志收集","url":"/archives/24052908.html","content":"<p><img src=\"https://image.charones.com/2024/05/20240616001.jpg\"></p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong>日志</strong> 对于开发者来说并不陌生，对于排查BUG、输出异常、关注重要业务节点数据参数等，都起着重要作用。而如何写好日志，如何排查日志，如何记录日志等对于开发者而言，往往是一个需要在项目初期就要全面考虑的事情，而本文主要终点介绍 <strong>如何记录日志</strong>。</p>\n<p><strong>常见的日志记录方式：</strong></p>\n<ol>\n<li>ELK（Elasticsearch+logash+kibana）</li>\n<li>数据库</li>\n<li>redis</li>\n<li>本地磁盘文件记录</li>\n<li>直接控制台输出</li>\n</ol>\n<p>以上都是比较常见的日志记录方式，各个方式各有千秋，有好有坏，在此不做展开讲。</p>\n<p>今天要介绍的一种和上面不同的日志记录方式： <strong>Logback + Fluentbit + Openobserve</strong></p>\n<h2 id=\"何为Openobserve\"><a href=\"#何为Openobserve\" class=\"headerlink\" title=\"何为Openobserve\"></a>何为Openobserve</h2><p>OpenObserve 是一个云原生的观测性平台，专为处理 PB 字节级规模的日志、指标、跟踪和分析而设计。它不仅易于操作，而且能够极大地降低存储成本、提升性能。</p>\n<p><strong>主要特点和功能：</strong></p>\n<ol>\n<li>简单易用：与Elasticsearch相比，OpenObserve的操作非常简单，几乎不需要理解和调整大量参数即可快速上手。您只需花费不到2分钟的时间，即可开始使用OpenObserve。</li>\n<li>降低存储成本：通过使用OpenObserve，您可以将日志存储成本降低约140倍，相比于Elasticsearch，这是一个巨大的节省。</li>\n<li>高性能：OpenObserve提供高性能的日志、指标和跟踪处理能力，能够处理宠字节级规模的数据，满足大规模应用的需求。</li>\n<li>丰富的功能：OpenObserve提供了多种功能，包括日志、指标、跟踪的处理、警报和仪表盘等。它还提供了丰富的内置功能，如数据增强、数据脱敏、日志压缩等，无需学习额外的查询语言。</li>\n<li>开源兼容：OpenObserve是一个开源项目，您可以自由地修改和定制，满足自己的特定需求。</li>\n</ol>\n<h2 id=\"何为Fluentbit\"><a href=\"#何为Fluentbit\" class=\"headerlink\" title=\"何为Fluentbit\"></a>何为Fluentbit</h2><p>是一个开源的、轻量级的日志数据收集器（log collector）和 转发器（log forwarder），旨在高效地收集、处理和转发日志数据。它是Fluentd项目的一个子项目，旨在解决日志收集和处理的特定需求。</p>\n<p><strong>主要特点和功能：</strong></p>\n<ol>\n<li>轻量级：FluentBit被设计为轻量级的日志收集器，具有较小的资源占用，适用于在资源受限的环境中运行，例如边缘设备或嵌入式系统。</li>\n<li>高性能：由于其轻量级设计，FluentBit能够在高吞吐量的场景下表现出色，可以处理大量的日志数据。</li>\n<li>多种输入和输出插件：FluentBit支持多种输入和输出插件，使其能够从不同的数据源收集日志，并将日志转发到多种目标。</li>\n<li>可扩展性：FluentBit可以通过插件进行扩展，用户可以根据需求编写自定义插件来实现特定功能。</li>\n<li>支持多种日志格式：FluentBit支持解析和处理多种日志格式，如JSON、Grok、Syslog等。</li>\n<li>容器友好：FluentBit特别适用于容器化环境，可以与容器编排工具（如Kubernetes）和容器运行时（如Docker）集成，以收集容器日志。</li>\n<li>跨平台：FluentBit支持多个操作系统平台，包括Linux、Windows、macOS等。</li>\n</ol>\n<h2 id=\"安装Openobserve\"><a href=\"#安装Openobserve\" class=\"headerlink\" title=\"安装Openobserve\"></a>安装Openobserve</h2><p>前提保证已经安装docker和docker-compose。然后我们使用docker-compose方式安装</p>\n<p>1、docker-compose.yml 文件内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">openobserve:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">public.ecr.aws/zinclabs/openobserve:latest</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">ZO_ROOT_USER_EMAIL:</span> <span class=\"string\">&quot;test@qq.com&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">ZO_ROOT_USER_PASSWORD:</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;5080:5080&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/openobserve/data:/data</span></span><br></pre></td></tr></table></figure>\n\n<p>2、然后输入启动 docker-compose 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>3、启动完毕后就可以打开<strong>openobserve</strong> 控制台页面</p>\n<ol>\n<li>浏览器输入：ip:5080</li>\n<li>登录账号：docker-compose配置中的ZO_ROOT_USER_EMAIL</li>\n<li>登录密码：docker-compose配置中的ZO_ROOT_USER_PASSWORD</li>\n</ol>\n<p><strong>控制台主页截图</strong></p>\n<p><img src=\"https://image.charones.com/2024/05/202405292301346.jpg\"></p>\n<p>4、详细官方文档地址：<a href=\"https://openobserve.ai/docs/\">https://openobserve.ai/docs/</a></p>\n<h2 id=\"安装Fluentbit\"><a href=\"#安装Fluentbit\" class=\"headerlink\" title=\"安装Fluentbit\"></a>安装Fluentbit</h2><p>前提保证已经安装docker和docker-compose。然后我们使用docker-compose方式安装</p>\n<p>1、docker-compose.yml 文件内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">fluent-bit:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">fluent/fluent-bit:3.0.5</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/fluent/data/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;24224:24224&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br></pre></td></tr></table></figure>\n\n<p>2、<strong>fluent-bit.conf</strong> 配置文件</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[SERVICE]</span></span><br><span class=\"line\">    Flush        5</span><br><span class=\"line\">    Daemon       off</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[INPUT]</span></span><br><span class=\"line\">    Name    tcp</span><br><span class=\"line\">    Listen  0.0.0.0</span><br><span class=\"line\">    Port    24224</span><br><span class=\"line\">    Format  json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[OUTPUT]</span></span><br><span class=\"line\">    Name http</span><br><span class=\"line\">    Match *</span><br><span class=\"line\">    URI /api/default/default/_json</span><br><span class=\"line\">    Host 192.168.93.27</span><br><span class=\"line\">    Port 5080</span><br><span class=\"line\">    tls Off</span><br><span class=\"line\">    Format json</span><br><span class=\"line\">    Json_date_key _timestamp</span><br><span class=\"line\">    Json_date_format iso8601</span><br><span class=\"line\">    HTTP_User root@qq.com</span><br><span class=\"line\">    HTTP_Passwd g8MmJtyRzWZYYtAK</span><br></pre></td></tr></table></figure>\n\n<p>3、各个部分参数解释</p>\n<ol>\n<li>[SERVICE] + [INPUT] 这两个部分为默认写死配置。</li>\n<li>[OUTPUT] 为 <strong>openobserve</strong> 平台提供的参数，直接可以在平台配置中复制粘贴</li>\n</ol>\n<p>4、详细官方文档地址：<a href=\"https://docs.fluentbit.io/manual\">https://docs.fluentbit.io/manual</a></p>\n<p><strong>[OUTPUT] 在  openobserve  平台的位置截图</strong></p>\n<p><img src=\"https://image.charones.com/2024/05/202405292307638.jpg\"></p>\n<h2 id=\"Logback配置\"><a href=\"#Logback配置\" class=\"headerlink\" title=\"Logback配置\"></a>Logback配置</h2><p><strong>logback.xml配置文件</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">&quot;60 seconds&quot;</span> <span class=\"attr\">debug</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--当前spring环境属性--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">springProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spring.profiles.active&quot;</span> <span class=\"attr\">source</span>=<span class=\"string\">&quot;spring.profiles.active&quot;</span> <span class=\"attr\">defaultValue</span>=<span class=\"string\">&quot;xxx&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--当前spring项目名称--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">springProperty</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spring.application.name&quot;</span> <span class=\"attr\">source</span>=<span class=\"string\">&quot;spring.application.name&quot;</span> <span class=\"attr\">defaultValue</span>=<span class=\"string\">&quot;xxx&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 上传日志到OpenObserve。比ES更轻量--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;OpenObserve&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>info<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--FluentBit收集器地址--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">destination</span>&gt;</span>192.168.93.27:24224<span class=\"tag\">&lt;/<span class=\"name\">destination</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">providers</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                        &quot;event.dataset&quot;:&quot;$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;&quot;,</span><br><span class=\"line\">                        &quot;level&quot;: &quot;%level&quot;,</span><br><span class=\"line\">                        &quot;createTime&quot;: &quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125;&quot;,</span><br><span class=\"line\">                        &quot;trace&quot;: &quot;%X&#123;X-B3-TraceId:-&#125;&quot;,</span><br><span class=\"line\">                        &quot;requestId&quot;: &quot;%X&#123;requestId&#125;&quot;,</span><br><span class=\"line\">                        &quot;span&quot;: &quot;%X&#123;X-B3-SpanId:-&#125;&quot;,</span><br><span class=\"line\">                        &quot;parent&quot;: &quot;%X&#123;X-B3-ParentSpanId:-&#125;&quot;,</span><br><span class=\"line\">                        &quot;thread&quot;: &quot;%thread&quot;,</span><br><span class=\"line\">                        &quot;className&quot;: &quot;%logger&#123;40&#125;&quot;,</span><br><span class=\"line\">                        &quot;message&quot;: &quot;%message&quot;,</span><br><span class=\"line\">                        &quot;stackTrace&quot;: &quot;%exception&#123;10&#125;&quot;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">providers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">connectionStrategy</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">roundRobin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">connectionTTL</span>&gt;</span>5 minutes<span class=\"tag\">&lt;/<span class=\"name\">connectionTTL</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">roundRobin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">connectionStrategy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;info&quot;</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;OpenObserve&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>至此整个链路流程配置已全部完成，然后运行 <strong>logback</strong> 所在的项目，启动项目后就可以自动将日志上传收集到 <strong>Openobserve</strong> 平台。</p>\n<p><strong>实战项目：</strong> <a href=\"https://github.com/Snykta/forge-fast-boot\">https://github.com/Snykta/forge-fast-boot</a> (一个可快速开发的spring单体项目脚手架)</p>\n","categories":["Java","SpringBoot","SpringCloud"],"tags":["SpringBoot","Java","SpringCloud"]},{"title":"SpringCloud集成Seata实现分布式事务管理","url":"/archives/20240601001.html","content":"<p><img src=\"https://image.charones.com/2024/06/20240616002.jpg\"></p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>事务是保证数据一致性，准确性的重要保证。以spring举例，在单体项目中常用的是注解式事务，例如在service方法上添加 <strong>@Transactional(rollbackFor = Exception.class)</strong> 注解即可。而当我们业务复杂，数据量大时候，我们就不得不拆分服务，当拆分服务后，每个功能模块都是一个独立运行的服务，这时候我们又该如何处理事务呢？如何保证服务与服务之间的数据一致性呢？</p>\n<h2 id=\"何为数据库事务\"><a href=\"#何为数据库事务\" class=\"headerlink\" title=\"何为数据库事务\"></a>何为数据库事务</h2><p>数据库事务（Database Transaction）是指作为单个逻辑工作单元执行的一组数据库操作，这些操作要么全部成功完成并永久保存，要么全部失败并回滚到最初状态，以确保数据库的一致性和完整性。</p>\n<p>事务具有以下四个特性，通常缩写为 ACID：</p>\n<ol>\n<li><strong>原子性（Atomicity）</strong>：事务被视为不可分割的工作单元，要么全部执行成功，要么全部失败回滚。如果事务中的任何一部分操作失败，整个事务都会被回滚到初始状态。</li>\n<li><strong>一致性（Consistency）</strong>：事务的执行将数据库从一致状态转移到另一个一致状态，即事务执行前后数据库的完整性约束没有被破坏。</li>\n<li><strong>隔离性（Isolation）</strong>：多个事务并发执行时，每个事务的操作应该被隔离，互不干扰。这意味着一个事务的中间状态对其他事务是不可见的，直到事务提交。</li>\n<li><strong>持久性（Durability）</strong>：一旦事务提交，其所做的修改将永久保存在数据库中，并不会因为系统故障或其他因素而丢失。</li>\n</ol>\n<p>通过事务，可以确保数据库操作的完整性和一致性，避免数据损坏或丢失。数据库管理系统使用事务来保证数据的可靠性，并提供回滚和提交操作来管理事务的执行。</p>\n<h2 id=\"何为分布式事务\"><a href=\"#何为分布式事务\" class=\"headerlink\" title=\"何为分布式事务\"></a>何为分布式事务</h2><p>分布式事务是指涉及多个独立数据库或应用程序之间的事务操作，这些数据库或应用程序分布在不同的计算机或服务器上。分布式事务需要确保跨多个节点的事务操作具有ACID属性，保证数据的一致性和完整性。</p>\n<p><strong>通俗来讲：</strong>就是把上面的单体事务连接成多个事务且保证一致。单个变多个，听着简单实际大有搞头。</p>\n<h2 id=\"何为Seata\"><a href=\"#何为Seata\" class=\"headerlink\" title=\"何为Seata\"></a>何为Seata</h2><p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。2023 年 10 月阿里和蚂蚁集团正式将 Seata 捐赠给 Apache 基金会。</p>\n<h2 id=\"部署Seata服务端\"><a href=\"#部署Seata服务端\" class=\"headerlink\" title=\"部署Seata服务端\"></a>部署Seata服务端</h2><p><strong>1、首先使用docker命令临时启动一个seata容器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8091:8091 -p 7091:7091  --name seata-server-test seataio/seata-server:latest</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、将此容器启动后内部的配置文件copy出来放到宿主机中，方便后面使用</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker cp seata-server-test:/seata-server/resources /home/seata/data</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、删除上面创建的临时容器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rm -f seata-server-test</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、创建docker-compose.yml。其中/seata-server/resources映射的目录就是第一步copy出来的目录</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.1&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">seata-server:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">seataio/seata-server:1.6.1</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">seata-server</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;7091:7091&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8091:8091&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;/usr/share/zoneinfo/Asia/Shanghai:/etc/timezone&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;/home/seata/data/resources:/seata-server/resources&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>5、编辑seata的application.yml配置文件，路径为第2步copy出来的位置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7091</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">seata-server</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">config:</span> <span class=\"string\">classpath:logback-spring.xml</span></span><br><span class=\"line\">  <span class=\"attr\">file:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">$&#123;user.home&#125;/logs/seata</span></span><br><span class=\"line\">  <span class=\"attr\">extend:</span></span><br><span class=\"line\">    <span class=\"attr\">logstash-appender:</span></span><br><span class=\"line\">      <span class=\"attr\">destination:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:4560</span></span><br><span class=\"line\">    <span class=\"attr\">kafka-appender:</span></span><br><span class=\"line\">      <span class=\"attr\">bootstrap-servers:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:9092</span></span><br><span class=\"line\">      <span class=\"attr\">topic:</span> <span class=\"string\">logback_to_logstash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">console:</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">seata</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">seata</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">seata:</span></span><br><span class=\"line\">  <span class=\"attr\">config:</span></span><br><span class=\"line\">    <span class=\"comment\"># support: nacos, consul, apollo, zk, etcd3</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">      <span class=\"attr\">group:</span> <span class=\"string\">DEFAULT_GROUP</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span></span><br><span class=\"line\">      <span class=\"attr\">data-id:</span> <span class=\"string\">seataServer.properties</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"comment\"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">application:</span> <span class=\"string\">seata-server</span></span><br><span class=\"line\">      <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">      <span class=\"attr\">group:</span> <span class=\"string\">DEFAULT_GROUP</span></span><br><span class=\"line\">      <span class=\"comment\"># tc集群名称</span></span><br><span class=\"line\">      <span class=\"attr\">cluster:</span> <span class=\"string\">default</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span></span><br><span class=\"line\"><span class=\"comment\">#  server:</span></span><br><span class=\"line\"><span class=\"comment\">#    service-port: 8091 #If not configured, the default is &#x27;$&#123;server.port&#125; + 1000&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">security:</span></span><br><span class=\"line\">    <span class=\"attr\">secretKey:</span> <span class=\"string\">SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span></span><br><span class=\"line\">    <span class=\"attr\">tokenValidityInMilliseconds:</span> <span class=\"number\">1800000</span></span><br><span class=\"line\">    <span class=\"attr\">ignore:</span></span><br><span class=\"line\">      <span class=\"attr\">urls:</span> <span class=\"string\">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/api/v1/auth/login</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>此配置文件的大致意思为：</strong></p>\n<ol>\n<li>使用nacos作为服务的注册中心</li>\n<li>使用nacos作为服务配置中心</li>\n</ol>\n<p>PS：因此需要先提前搭建好nacos服务</p>\n<p><strong>6、创建seata的配置文件并上传到nacos中</strong></p>\n<p>文件名称为：<strong>seataServer.properties</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">store.mode</span>=<span class=\"string\">db</span></span><br><span class=\"line\"><span class=\"comment\">#-----db-----</span></span><br><span class=\"line\"><span class=\"meta\">store.db.datasource</span>=<span class=\"string\">druid</span></span><br><span class=\"line\"><span class=\"meta\">store.db.dbType</span>=<span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"comment\"># 需要根据mysql的版本调整driverClassName</span></span><br><span class=\"line\"><span class=\"comment\"># mysql8及以上版本对应的driver：com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\"># mysql8以下版本的driver：com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"meta\">store.db.driverClassName</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"meta\">store.db.url</span>=<span class=\"string\">jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true&amp;characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false</span></span><br><span class=\"line\"><span class=\"meta\">store.db.user</span>= <span class=\"string\">用户名</span></span><br><span class=\"line\"><span class=\"meta\">store.db.password</span>=<span class=\"string\">密码</span></span><br><span class=\"line\"><span class=\"comment\"># 数据库初始连接数</span></span><br><span class=\"line\"><span class=\"meta\">store.db.minConn</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"comment\"># 数据库最大连接数</span></span><br><span class=\"line\"><span class=\"meta\">store.db.maxConn</span>=<span class=\"string\">20</span></span><br><span class=\"line\"><span class=\"comment\"># 获取连接时最大等待时间 默认5000，单位毫秒</span></span><br><span class=\"line\"><span class=\"meta\">store.db.maxWait</span>=<span class=\"string\">5000</span></span><br><span class=\"line\"><span class=\"comment\"># 全局事务表名 默认global_table</span></span><br><span class=\"line\"><span class=\"meta\">store.db.globalTable</span>=<span class=\"string\">global_table</span></span><br><span class=\"line\"><span class=\"comment\"># 分支事务表名 默认branch_table</span></span><br><span class=\"line\"><span class=\"meta\">store.db.branchTable</span>=<span class=\"string\">branch_table</span></span><br><span class=\"line\"><span class=\"comment\"># 全局锁表名 默认lock_table</span></span><br><span class=\"line\"><span class=\"meta\">store.db.lockTable</span>=<span class=\"string\">lock_table</span></span><br><span class=\"line\"><span class=\"comment\"># 查询全局事务一次的最大条数 默认100</span></span><br><span class=\"line\"><span class=\"meta\">store.db.queryLimit</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># undo保留天数 默认7天,log_status=1（附录3）和未正常清理的undo</span></span><br><span class=\"line\"><span class=\"meta\">server.undo.logSaveDays</span>=<span class=\"string\">7</span></span><br><span class=\"line\"><span class=\"comment\"># undo清理线程间隔时间 默认86400000，单位毫秒</span></span><br><span class=\"line\"><span class=\"meta\">server.undo.logDeletePeriod</span>=<span class=\"string\">86400000</span></span><br><span class=\"line\"><span class=\"comment\"># 二阶段提交重试超时时长 单位ms,s,m,h,d,对应毫秒,秒,分,小时,天,默认毫秒。默认值-1表示无限重试</span></span><br><span class=\"line\"><span class=\"comment\"># 公式: timeout&gt;=now-globalTransactionBeginTime,true表示超时则不再重试</span></span><br><span class=\"line\"><span class=\"comment\"># 注: 达到超时时间后将不会做任何重试,有数据不一致风险,除非业务自行可校准数据,否者慎用</span></span><br><span class=\"line\"><span class=\"meta\">server.maxCommitRetryTimeout</span>=<span class=\"string\">-1</span></span><br><span class=\"line\"><span class=\"comment\"># 二阶段回滚重试超时时长</span></span><br><span class=\"line\"><span class=\"meta\">server.maxRollbackRetryTimeout</span>=<span class=\"string\">-1</span></span><br><span class=\"line\"><span class=\"comment\"># 二阶段提交未完成状态全局事务重试提交线程间隔时间 默认1000，单位毫秒</span></span><br><span class=\"line\"><span class=\"meta\">server.recovery.committingRetryPeriod</span>=<span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"comment\"># 二阶段异步提交状态重试提交线程间隔时间 默认1000，单位毫秒</span></span><br><span class=\"line\"><span class=\"meta\">server.recovery.asynCommittingRetryPeriod</span>=<span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"comment\"># 二阶段回滚状态重试回滚线程间隔时间  默认1000，单位毫秒</span></span><br><span class=\"line\"><span class=\"meta\">server.recovery.rollbackingRetryPeriod</span>=<span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"comment\"># 超时状态检测重试线程间隔时间 默认1000，单位毫秒，检测出超时将全局事务置入回滚会话管理器</span></span><br><span class=\"line\"><span class=\"meta\">server.recovery.timeoutRetryPeriod</span>=<span class=\"string\">1000</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>7、创建seata库的表结构</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- -------------------------------- The script used when storeMode is &#x27;db&#x27; --------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- the table to store GlobalSession data</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `global_table`</span><br><span class=\"line\">(</span><br><span class=\"line\">    `xid`                       <span class=\"type\">VARCHAR</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    `transaction_id`            <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">    `status`                    TINYINT      <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    `application_id`            <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    `transaction_service_group` <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    `transaction_name`          <span class=\"type\">VARCHAR</span>(<span class=\"number\">128</span>),</span><br><span class=\"line\">    `timeout`                   <span class=\"type\">INT</span>,</span><br><span class=\"line\">    `begin_time`                <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">    `application_data`          <span class=\"type\">VARCHAR</span>(<span class=\"number\">2000</span>),</span><br><span class=\"line\">    `gmt_create`                DATETIME,</span><br><span class=\"line\">    `gmt_modified`              DATETIME,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY</span> KEY (`xid`),</span><br><span class=\"line\">    KEY `idx_status_gmt_modified` (`status` , `gmt_modified`),</span><br><span class=\"line\">    KEY `idx_transaction_id` (`transaction_id`)</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB</span><br><span class=\"line\">  <span class=\"keyword\">DEFAULT</span> CHARSET <span class=\"operator\">=</span> utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- the table to store BranchSession data</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `branch_table`</span><br><span class=\"line\">(</span><br><span class=\"line\">    `branch_id`         <span class=\"type\">BIGINT</span>       <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    `xid`               <span class=\"type\">VARCHAR</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    `transaction_id`    <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">    `resource_group_id` <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    `resource_id`       <span class=\"type\">VARCHAR</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">    `branch_type`       <span class=\"type\">VARCHAR</span>(<span class=\"number\">8</span>),</span><br><span class=\"line\">    `status`            TINYINT,</span><br><span class=\"line\">    `client_id`         <span class=\"type\">VARCHAR</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">    `application_data`  <span class=\"type\">VARCHAR</span>(<span class=\"number\">2000</span>),</span><br><span class=\"line\">    `gmt_create`        DATETIME(<span class=\"number\">6</span>),</span><br><span class=\"line\">    `gmt_modified`      DATETIME(<span class=\"number\">6</span>),</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY</span> KEY (`branch_id`),</span><br><span class=\"line\">    KEY `idx_xid` (`xid`)</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB</span><br><span class=\"line\">  <span class=\"keyword\">DEFAULT</span> CHARSET <span class=\"operator\">=</span> utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- the table to store lock data</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `lock_table`</span><br><span class=\"line\">(</span><br><span class=\"line\">    `row_key`        <span class=\"type\">VARCHAR</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    `xid`            <span class=\"type\">VARCHAR</span>(<span class=\"number\">128</span>),</span><br><span class=\"line\">    `transaction_id` <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">    `branch_id`      <span class=\"type\">BIGINT</span>       <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    `resource_id`    <span class=\"type\">VARCHAR</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">    `table_name`     <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    `pk`             <span class=\"type\">VARCHAR</span>(<span class=\"number\">36</span>),</span><br><span class=\"line\">    `status`         TINYINT      <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;0:locked ,1:rollbacking&#x27;</span>,</span><br><span class=\"line\">    `gmt_create`     DATETIME,</span><br><span class=\"line\">    `gmt_modified`   DATETIME,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY</span> KEY (`row_key`),</span><br><span class=\"line\">    KEY `idx_status` (`status`),</span><br><span class=\"line\">    KEY `idx_branch_id` (`branch_id`),</span><br><span class=\"line\">    KEY `idx_xid` (`xid`)</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB</span><br><span class=\"line\">  <span class=\"keyword\">DEFAULT</span> CHARSET <span class=\"operator\">=</span> utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `distributed_lock`</span><br><span class=\"line\">(</span><br><span class=\"line\">    `lock_key`       <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    `lock_value`     <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    `expire`         <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">    <span class=\"keyword\">primary</span> key (`lock_key`)</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB</span><br><span class=\"line\">  <span class=\"keyword\">DEFAULT</span> CHARSET <span class=\"operator\">=</span> utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;AsyncCommitting&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;RetryCommitting&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;RetryRollbacking&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;TxTimeoutCheck&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>8、启动seata服务</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>自此Seata的服务端已经全部搭建完成，上面教程给出的是 <strong>nacos+db</strong> 方式部署。当然也可以选择<strong>无nacos、无db</strong>方式部署，更为简单但不那么稳定，可能会出现事务丢失情况。</p>\n<p>具体配置相关可参考官方文档：<a href=\"https://seata.apache.org/zh-cn/docs/ops/deploy-by-docker-compose\">https://seata.apache.org/zh-cn/docs/ops/deploy-by-docker-compose</a></p>\n<h2 id=\"配置Seata客户端\"><a href=\"#配置Seata客户端\" class=\"headerlink\" title=\"配置Seata客户端\"></a>配置Seata客户端</h2><p>客户端就比较简单分为以下几点</p>\n<p><strong>1、服务端项目需要注册到nacos注册中心且和seata共用一个中心</strong></p>\n<p><strong>2、引入seata的maven依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3、配置application.properties相关配置</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用默认nacos组，注意和seata服务端配置保持一致</span></span><br><span class=\"line\"><span class=\"meta\">seata.config.nacos.group</span>=<span class=\"string\">DEFAULT_GROUP</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>4、在需要使用分布式事务的地方加上注解 @GlobalTransactional</strong></p>\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>至此分布式事务seata已经全部搭建完成。</p>\n<p>详情实战可参考项目：<a href=\"https://github.com/Snykta/forge-fast-cloud\">https://github.com/Snykta/forge-fast-cloud</a> （一个可快速开始的SpringCloud微服务脚手架）</p>\n","categories":["Java","SpringBoot","SpringCloud"],"tags":["SpringBoot","Java","SpringCloud"]},{"title":"使用docker-compose方式部署mysql","url":"/archives/202406160001.html","content":"<p><img src=\"https://image.charones.com/2024/06/20240616003.jpg\"></p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p><strong>1、docker-compose.yml 代码</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">mysql:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql:8.0.18</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">mysql-8.0.18</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">      <span class=\"attr\">TZ:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">3306</span><span class=\"string\">:3306</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/docker-container-list/mysql-8.0.18/data/mysql:/var/lib/mysql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/docker-container-list/mysql-8.0.18/data/log:/var/log/mysql</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、运行容器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose -up -d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>非常简单，已部署完毕。</p>\n","categories":["Docker","SpringCloud"],"tags":["Docker","SpringCloud"]},{"title":"使用docker-compose方式部署nacos","url":"/archives/20240602001.html","content":"<p><img src=\"https://image.charones.com/2024/06/20240616003.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p><strong>1、docker-compose.yml 代码</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">nacos-server:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nacos/nacos-server:v2.2.3</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">nacos-server</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8848:8848&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9848:9848&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9849:9849&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">MODE=standalone</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/nacos/data/logs:/home/nacos/logs</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/nacos/data/nacos_data:/home/nacos/data</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、运行容器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose -up -d</span><br></pre></td></tr></table></figure>\n\n<p><strong>PS：Nacos的2.2.3版本，需要多开放9848、9849端口，否则在新的SpringCloud中会出现连接报错。</strong></p>\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>非常简单，已部署完毕。</p>\n<p>更多详细配置可参考官方文档：<a href=\"https://nacos.io/zh-cn/docs/v2/quickstart/quick-start.html\">https://nacos.io/zh-cn/docs/v2/quickstart/quick-start.html</a></p>\n","categories":["Docker","SpringCloud"],"tags":["Docker","SpringCloud"]},{"title":"使用docker-compose方式部署redis","url":"/archives/202406160002.html","content":"<p><img src=\"https://image.charones.com/2024/06/20240616004.jpg\"></p>\n<span id=\"more\"></span>\n\n\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p><strong>1、docker-compose.yml 代码</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:7.0.5</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">redis-7.0.5</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">6379</span><span class=\"string\">:6379</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/docker-container-list/redis-7.0.5/data/redis-data:/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/docker-container-list/redis-7.0.5/data/redis.conf:/etc/redis.conf</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">      <span class=\"string\">redis-server</span> <span class=\"string\">/etc/redis.conf</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、redis.conf 代码配置</strong></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启保护</span></span><br><span class=\"line\">protected-mode no</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绑定监听IP地址</span></span><br><span class=\"line\">bind 0.0.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义密码</span></span><br><span class=\"line\"><span class=\"comment\"># requirepass root</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动端口</span></span><br><span class=\"line\">port 6379</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis 默认就开启 rdb 全量备份，以下是默认的备份触发机制</span></span><br><span class=\"line\"><span class=\"comment\"># 900s内至少一次写操作则执行bgsave进行RDB持久化</span></span><br><span class=\"line\">save 900 1</span><br><span class=\"line\">save 300 10</span><br><span class=\"line\">save 60 10000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否压缩 rdb 备份文件，默认是压缩</span></span><br><span class=\"line\"><span class=\"comment\"># 如果 redis 承载的数据量非常大的话，建议不要压缩</span></span><br><span class=\"line\"><span class=\"comment\"># 因为压缩过程中需要耗费大量 cpu 和内存资源，磁盘相对而言比较廉价</span></span><br><span class=\"line\">rdbcompression yes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rdb 备份的文件名</span></span><br><span class=\"line\">dbfilename dump.rdb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Redis 备份文件存储目录，注意：该路径是 docker 容器内的路径</span></span><br><span class=\"line\">dir /data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否开启 aof 增量备份功能，默认是否</span></span><br><span class=\"line\">appendonly yes</span><br><span class=\"line\"><span class=\"comment\"># AOF文件的名称，这里使用默认值</span></span><br><span class=\"line\">appendfilename appendonly.aof</span><br><span class=\"line\"><span class=\"comment\"># aof 增量备份的策略，这里是每秒钟一次，将累积的写命令持久化到硬盘中</span></span><br><span class=\"line\">appendfsync everysec</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、运行容器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose -up -d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结言\"><a href=\"#结言\" class=\"headerlink\" title=\"结言\"></a>结言</h2><p>非常简单，已部署完毕。</p>\n","categories":["Docker","SpringCloud"],"tags":["Docker","SpringCloud"]}]